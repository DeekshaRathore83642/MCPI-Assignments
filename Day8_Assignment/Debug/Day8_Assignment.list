
Day8_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08001450  08001450  00002450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c8  080015c8  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080015c8  080015c8  000025c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015d0  080015d0  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015d0  080015d0  000025d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015d4  080015d4  000025d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080015d8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014b8  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000724  00000000  00000000  00004536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fa  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019437  00000000  00000000  00004ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fbc  00000000  00000000  0001e309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdc8  00000000  00000000  000202c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac08d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ac0  00000000  00000000  000ac0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000acb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  000acbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001438 	.word	0x08001438

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001438 	.word	0x08001438

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EEPROM_Init>:
 *      Author: Nilesh
 */

#include "eeprom.h"

void EEPROM_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 8000286:	f000 f87f 	bl	8000388 <I2CInit>
	// optional -- check if eeprom is present
	I2CStart();
 800028a:	f000 f833 	bl	80002f4 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 800028e:	20a0      	movs	r0, #160	@ 0xa0
 8000290:	f000 f85c 	bl	800034c <I2CIsDeviceReady>
 8000294:	6078      	str	r0, [r7, #4]
	// if ret=0, eeprom not avail; otherwise, eeprom is avail.
	I2CStop();
 8000296:	f000 f843 	bl	8000320 <I2CStop>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <DelayMs+0x44>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002b2:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <DelayMs+0x48>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <DelayMs+0x4c>)
 80002b8:	fba2 2303 	umull	r2, r3, r2, r3
 80002bc:	099b      	lsrs	r3, r3, #6
 80002be:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002ca:	bf00      	nop
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <DelayMs+0x44>)
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	1ad2      	subs	r2, r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3f8      	bcc.n	80002cc <DelayMs+0x28>
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e0001000 	.word	0xe0001000
 80002ec:	20000000 	.word	0x20000000
 80002f0:	10624dd3 	.word	0x10624dd3

080002f4 <I2CStart>:
 *      Author: Nilesh
 */

#include "i2c.h"

void I2CStart() {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <I2CStart+0x28>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a07      	ldr	r2, [pc, #28]	@ (800031c <I2CStart+0x28>)
 80002fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000302:	6013      	str	r3, [r2, #0]
    //while(!(I2C1->SR1 & I2C_SR1_SB));
    while((I2C1->SR1 & I2C_SR1_SB) == 0);
 8000304:	bf00      	nop
 8000306:	4b05      	ldr	r3, [pc, #20]	@ (800031c <I2CStart+0x28>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <I2CStart+0x12>
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40005400 	.word	0x40005400

08000320 <I2CStop>:

void I2CRepeatStart() {
	I2CStart();
}

void I2CStop() {
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000324:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <I2CStop+0x28>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a07      	ldr	r2, [pc, #28]	@ (8000348 <I2CStop+0x28>)
 800032a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800032e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000330:	bf00      	nop
 8000332:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <I2CStop+0x28>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <I2CStop+0x12>
}
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40005400 	.word	0x40005400

0800034c <I2CIsDeviceReady>:
	// read content and clear flags
	val = I2C1->DR;
	return val;
}

int I2CIsDeviceReady(uint8_t slaveaddr) {
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f023 0301 	bic.w	r3, r3, #1
 800035c:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800035e:	4a09      	ldr	r2, [pc, #36]	@ (8000384 <I2CIsDeviceReady+0x38>)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000364:	bf00      	nop
 8000366:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <I2CIsDeviceReady+0x38>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f003 0302 	and.w	r3, r3, #2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 8000372:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <I2CIsDeviceReady+0x38>)
 8000374:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40005400 	.word	0x40005400

08000388 <I2CInit>:

void I2CInit() {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800038c:	4b43      	ldr	r3, [pc, #268]	@ (800049c <I2CInit+0x114>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a42      	ldr	r2, [pc, #264]	@ (800049c <I2CInit+0x114>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000398:	2032      	movs	r0, #50	@ 0x32
 800039a:	f7ff ff83 	bl	80002a4 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800039e:	4b3f      	ldr	r3, [pc, #252]	@ (800049c <I2CInit+0x114>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a2:	4a3e      	ldr	r2, [pc, #248]	@ (800049c <I2CInit+0x114>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3UL << I2C1_SCL*2); // PB6
 80003aa:	4b3d      	ldr	r3, [pc, #244]	@ (80004a0 <I2CInit+0x118>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a3c      	ldr	r2, [pc, #240]	@ (80004a0 <I2CInit+0x118>)
 80003b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80003b4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2UL << I2C1_SCL*2); // AF
 80003b6:	4b3a      	ldr	r3, [pc, #232]	@ (80004a0 <I2CInit+0x118>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a39      	ldr	r2, [pc, #228]	@ (80004a0 <I2CInit+0x118>)
 80003bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c0:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1UL << I2C1_SCL);   // open-drain
 80003c2:	4b37      	ldr	r3, [pc, #220]	@ (80004a0 <I2CInit+0x118>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	4a36      	ldr	r2, [pc, #216]	@ (80004a0 <I2CInit+0x118>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003cc:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3UL << I2C1_SCL*2); // no pull-up/down
 80003ce:	4b34      	ldr	r3, [pc, #208]	@ (80004a0 <I2CInit+0x118>)
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	4a33      	ldr	r2, [pc, #204]	@ (80004a0 <I2CInit+0x118>)
 80003d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80003d8:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3UL << I2C1_SDA*2); // PB7
 80003da:	4b31      	ldr	r3, [pc, #196]	@ (80004a0 <I2CInit+0x118>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a30      	ldr	r2, [pc, #192]	@ (80004a0 <I2CInit+0x118>)
 80003e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003e4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2UL << I2C1_SDA*2); // AF
 80003e6:	4b2e      	ldr	r3, [pc, #184]	@ (80004a0 <I2CInit+0x118>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a2d      	ldr	r2, [pc, #180]	@ (80004a0 <I2CInit+0x118>)
 80003ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003f0:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1UL << I2C1_SDA);   // open-drain
 80003f2:	4b2b      	ldr	r3, [pc, #172]	@ (80004a0 <I2CInit+0x118>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	4a2a      	ldr	r2, [pc, #168]	@ (80004a0 <I2CInit+0x118>)
 80003f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003fc:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3UL << I2C1_SDA*2); // no pull-up/down
 80003fe:	4b28      	ldr	r3, [pc, #160]	@ (80004a0 <I2CInit+0x118>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	4a27      	ldr	r2, [pc, #156]	@ (80004a0 <I2CInit+0x118>)
 8000404:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000408:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 800040a:	4b25      	ldr	r3, [pc, #148]	@ (80004a0 <I2CInit+0x118>)
 800040c:	6a1b      	ldr	r3, [r3, #32]
 800040e:	4a24      	ldr	r2, [pc, #144]	@ (80004a0 <I2CInit+0x118>)
 8000410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000414:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 8000416:	4b22      	ldr	r3, [pc, #136]	@ (80004a0 <I2CInit+0x118>)
 8000418:	6a1b      	ldr	r3, [r3, #32]
 800041a:	4a21      	ldr	r2, [pc, #132]	@ (80004a0 <I2CInit+0x118>)
 800041c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000420:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000422:	4b1e      	ldr	r3, [pc, #120]	@ (800049c <I2CInit+0x114>)
 8000424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000426:	4a1d      	ldr	r2, [pc, #116]	@ (800049c <I2CInit+0x114>)
 8000428:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800042c:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 800042e:	2032      	movs	r0, #50	@ 0x32
 8000430:	f7ff ff38 	bl	80002a4 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <I2CInit+0x11c>)
 8000436:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800043a:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 800043c:	4b19      	ldr	r3, [pc, #100]	@ (80004a4 <I2CInit+0x11c>)
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <I2CInit+0x11c>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	4a17      	ldr	r2, [pc, #92]	@ (80004a4 <I2CInit+0x11c>)
 8000448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800044c:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <I2CInit+0x11c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <I2CInit+0x11c>)
 8000454:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000458:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <I2CInit+0x11c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <I2CInit+0x11c>)
 8000460:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000464:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <I2CInit+0x11c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <I2CInit+0x11c>)
 800046c:	f043 0310 	orr.w	r3, r3, #16
 8000470:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <I2CInit+0x11c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0b      	ldr	r2, [pc, #44]	@ (80004a4 <I2CInit+0x11c>)
 8000478:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800047c:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <I2CInit+0x11c>)
 8000480:	6a1b      	ldr	r3, [r3, #32]
 8000482:	4a08      	ldr	r2, [pc, #32]	@ (80004a4 <I2CInit+0x11c>)
 8000484:	f043 0311 	orr.w	r3, r3, #17
 8000488:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 800048a:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <I2CInit+0x11c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <I2CInit+0x11c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6013      	str	r3, [r2, #0]
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020400 	.word	0x40020400
 80004a4:	40005400 	.word	0x40005400

080004a8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	@ 0x28
 80004ac:	af00      	add	r7, sp, #0
	char str1[32]="DESD";
 80004ae:	4a16      	ldr	r2, [pc, #88]	@ (8000508 <main+0x60>)
 80004b0:	f107 0308 	add.w	r3, r7, #8
 80004b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b8:	6018      	str	r0, [r3, #0]
 80004ba:	3304      	adds	r3, #4
 80004bc:	7019      	strb	r1, [r3, #0]
 80004be:	f107 030d 	add.w	r3, r7, #13
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	f8c3 2017 	str.w	r2, [r3, #23]
	char str[2];
	int choice;
	SystemInit();
 80004d4:	f000 f856 	bl	8000584 <SystemInit>
	UartInit(BAUD_9600);
 80004d8:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80004dc:	f000 f888 	bl	80005f0 <UartInit>
	UartPuts("Menu Driven Demo..!!!\r\n");
 80004e0:	480a      	ldr	r0, [pc, #40]	@ (800050c <main+0x64>)
 80004e2:	f000 f91f 	bl	8000724 <UartPuts>
	UartPuts("Enter Choice\r\n");
 80004e6:	480a      	ldr	r0, [pc, #40]	@ (8000510 <main+0x68>)
 80004e8:	f000 f91c 	bl	8000724 <UartPuts>
	sscanf(str,"%d",&choice);
 80004ec:	463a      	mov	r2, r7
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4908      	ldr	r1, [pc, #32]	@ (8000514 <main+0x6c>)
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f982 	bl	80007fc <siscanf>
	UartGets(str);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f92e 	bl	800075c <UartGets>
	EEPROM_Init();
 8000500:	f7ff febe 	bl	8000280 <EEPROM_Init>
	while(1);
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <main+0x5c>
 8000508:	0800147c 	.word	0x0800147c
 800050c:	08001450 	.word	0x08001450
 8000510:	08001468 	.word	0x08001468
 8000514:	08001478 	.word	0x08001478

08000518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000520:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <_sbrk+0x5c>)
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <_sbrk+0x60>)
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <_sbrk+0x64>)
 8000536:	4a12      	ldr	r2, [pc, #72]	@ (8000580 <_sbrk+0x68>)
 8000538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <_sbrk+0x64>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	429a      	cmp	r2, r3
 8000546:	d207      	bcs.n	8000558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000548:	f000 f984 	bl	8000854 <__errno>
 800054c:	4603      	mov	r3, r0
 800054e:	220c      	movs	r2, #12
 8000550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000556:	e009      	b.n	800056c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <_sbrk+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	4a05      	ldr	r2, [pc, #20]	@ (800057c <_sbrk+0x64>)
 8000568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20020000 	.word	0x20020000
 8000578:	00000400 	.word	0x00000400
 800057c:	20000070 	.word	0x20000070
 8000580:	200001c0 	.word	0x200001c0

08000584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  DWT_Init();
 8000588:	f000 f802 	bl	8000590 <DWT_Init>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000594:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <DWT_Init+0x58>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	4a13      	ldr	r2, [pc, #76]	@ (80005e8 <DWT_Init+0x58>)
 800059a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800059e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <DWT_Init+0x58>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <DWT_Init+0x58>)
 80005a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005aa:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <DWT_Init+0x5c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <DWT_Init+0x5c>)
 80005b2:	f023 0301 	bic.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <DWT_Init+0x5c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <DWT_Init+0x5c>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <DWT_Init+0x5c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ca:	bf00      	nop
    __ASM volatile ("NOP");
 80005cc:	bf00      	nop
    __ASM volatile ("NOP");
 80005ce:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <DWT_Init+0x5c>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000edf0 	.word	0xe000edf0
 80005ec:	e0001000 	.word	0xe0001000

080005f0 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80005f8:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <UartInit+0xd0>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fc:	4a30      	ldr	r2, [pc, #192]	@ (80006c0 <UartInit+0xd0>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000604:	4b2f      	ldr	r3, [pc, #188]	@ (80006c4 <UartInit+0xd4>)
 8000606:	6a1b      	ldr	r3, [r3, #32]
 8000608:	4a2e      	ldr	r2, [pc, #184]	@ (80006c4 <UartInit+0xd4>)
 800060a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800060e:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000610:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <UartInit+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a2b      	ldr	r2, [pc, #172]	@ (80006c4 <UartInit+0xd4>)
 8000616:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800061a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 800061c:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <UartInit+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <UartInit+0xd4>)
 8000622:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000626:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000628:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <UartInit+0xd4>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a25      	ldr	r2, [pc, #148]	@ (80006c4 <UartInit+0xd4>)
 800062e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000632:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000634:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <UartInit+0xd4>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	4a22      	ldr	r2, [pc, #136]	@ (80006c4 <UartInit+0xd4>)
 800063a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800063e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000640:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <UartInit+0xd4>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	4a1f      	ldr	r2, [pc, #124]	@ (80006c4 <UartInit+0xd4>)
 8000646:	f023 030c 	bic.w	r3, r3, #12
 800064a:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <UartInit+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <UartInit+0xd0>)
 8000652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <UartInit+0xd8>)
 800065a:	220c      	movs	r2, #12
 800065c:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <UartInit+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <UartInit+0xd8>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000670:	d016      	beq.n	80006a0 <UartInit+0xb0>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000678:	d816      	bhi.n	80006a8 <UartInit+0xb8>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000680:	d004      	beq.n	800068c <UartInit+0x9c>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000688:	d005      	beq.n	8000696 <UartInit+0xa6>
 800068a:	e00d      	b.n	80006a8 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <UartInit+0xd8>)
 800068e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000692:	609a      	str	r2, [r3, #8]
			break;
 8000694:	e008      	b.n	80006a8 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <UartInit+0xd8>)
 8000698:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800069c:	609a      	str	r2, [r3, #8]
			break;
 800069e:	e003      	b.n	80006a8 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <UartInit+0xd8>)
 80006a2:	228b      	movs	r2, #139	@ 0x8b
 80006a4:	609a      	str	r2, [r3, #8]
			break;
 80006a6:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <UartInit+0xd8>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <UartInit+0xd8>)
 80006ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40004400 	.word	0x40004400

080006cc <UartPutch>:

void UartPutch(uint8_t ch) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80006d6:	bf00      	nop
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <UartPutch+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0f9      	beq.n	80006d8 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 80006e4:	4a03      	ldr	r2, [pc, #12]	@ (80006f4 <UartPutch+0x28>)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	6053      	str	r3, [r2, #4]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40004400 	.word	0x40004400

080006f8 <UartGetch>:

uint8_t UartGetch(void) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 80006fe:	bf00      	nop
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <UartGetch+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f003 0320 	and.w	r3, r3, #32
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0f9      	beq.n	8000700 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <UartGetch+0x28>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000712:	79fb      	ldrb	r3, [r7, #7]
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40004400 	.word	0x40004400

08000724 <UartPuts>:

void UartPuts(char str[]) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e009      	b.n	8000746 <UartPuts+0x22>
		UartPutch(str[i]);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffc6 	bl	80006cc <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1ef      	bne.n	8000732 <UartPuts+0xe>
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <UartGets>:

void UartGets(char str[]) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	int i=0;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000768:	f7ff ffc6 	bl	80006f8 <UartGetch>
 800076c:	4603      	mov	r3, r0
 800076e:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	7afa      	ldrb	r2, [r7, #11]
 8000778:	701a      	strb	r2, [r3, #0]
		i++;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000780:	7afb      	ldrb	r3, [r7, #11]
 8000782:	2b0d      	cmp	r3, #13
 8000784:	d1f0      	bne.n	8000768 <UartGets+0xc>
	str[i] = '\n';
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	220a      	movs	r2, #10
 800078e:	701a      	strb	r2, [r3, #0]
	i++;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3301      	adds	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ac:	f7ff feea 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	@ (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	@ (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d6:	f000 f843 	bl	8000860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fe65 	bl	80004a8 <main>

080007de <LoopForever>:

LoopForever:
  b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   r0, =_estack
 80007e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80007ec:	080015d8 	.word	0x080015d8
  ldr r2, =_sbss
 80007f0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80007f4:	200001bc 	.word	0x200001bc

080007f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC_IRQHandler>
	...

080007fc <siscanf>:
 80007fc:	b40e      	push	{r1, r2, r3}
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	b09c      	sub	sp, #112	@ 0x70
 8000802:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000804:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000808:	f854 5b04 	ldr.w	r5, [r4], #4
 800080c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000810:	9002      	str	r0, [sp, #8]
 8000812:	9006      	str	r0, [sp, #24]
 8000814:	f7ff fcdc 	bl	80001d0 <strlen>
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <siscanf+0x4c>)
 800081a:	9003      	str	r0, [sp, #12]
 800081c:	9007      	str	r0, [sp, #28]
 800081e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000820:	480a      	ldr	r0, [pc, #40]	@ (800084c <siscanf+0x50>)
 8000822:	9401      	str	r4, [sp, #4]
 8000824:	2300      	movs	r3, #0
 8000826:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000828:	9314      	str	r3, [sp, #80]	@ 0x50
 800082a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000832:	462a      	mov	r2, r5
 8000834:	4623      	mov	r3, r4
 8000836:	a902      	add	r1, sp, #8
 8000838:	6800      	ldr	r0, [r0, #0]
 800083a:	f000 f987 	bl	8000b4c <__ssvfiscanf_r>
 800083e:	b01c      	add	sp, #112	@ 0x70
 8000840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000844:	b003      	add	sp, #12
 8000846:	4770      	bx	lr
 8000848:	08000851 	.word	0x08000851
 800084c:	20000004 	.word	0x20000004

08000850 <__seofread>:
 8000850:	2000      	movs	r0, #0
 8000852:	4770      	bx	lr

08000854 <__errno>:
 8000854:	4b01      	ldr	r3, [pc, #4]	@ (800085c <__errno+0x8>)
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000004 	.word	0x20000004

08000860 <__libc_init_array>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	4d0d      	ldr	r5, [pc, #52]	@ (8000898 <__libc_init_array+0x38>)
 8000864:	4c0d      	ldr	r4, [pc, #52]	@ (800089c <__libc_init_array+0x3c>)
 8000866:	1b64      	subs	r4, r4, r5
 8000868:	10a4      	asrs	r4, r4, #2
 800086a:	2600      	movs	r6, #0
 800086c:	42a6      	cmp	r6, r4
 800086e:	d109      	bne.n	8000884 <__libc_init_array+0x24>
 8000870:	4d0b      	ldr	r5, [pc, #44]	@ (80008a0 <__libc_init_array+0x40>)
 8000872:	4c0c      	ldr	r4, [pc, #48]	@ (80008a4 <__libc_init_array+0x44>)
 8000874:	f000 fde0 	bl	8001438 <_init>
 8000878:	1b64      	subs	r4, r4, r5
 800087a:	10a4      	asrs	r4, r4, #2
 800087c:	2600      	movs	r6, #0
 800087e:	42a6      	cmp	r6, r4
 8000880:	d105      	bne.n	800088e <__libc_init_array+0x2e>
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f855 3b04 	ldr.w	r3, [r5], #4
 8000888:	4798      	blx	r3
 800088a:	3601      	adds	r6, #1
 800088c:	e7ee      	b.n	800086c <__libc_init_array+0xc>
 800088e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000892:	4798      	blx	r3
 8000894:	3601      	adds	r6, #1
 8000896:	e7f2      	b.n	800087e <__libc_init_array+0x1e>
 8000898:	080015d0 	.word	0x080015d0
 800089c:	080015d0 	.word	0x080015d0
 80008a0:	080015d0 	.word	0x080015d0
 80008a4:	080015d4 	.word	0x080015d4

080008a8 <__retarget_lock_acquire_recursive>:
 80008a8:	4770      	bx	lr

080008aa <__retarget_lock_release_recursive>:
 80008aa:	4770      	bx	lr

080008ac <_free_r>:
 80008ac:	b538      	push	{r3, r4, r5, lr}
 80008ae:	4605      	mov	r5, r0
 80008b0:	2900      	cmp	r1, #0
 80008b2:	d041      	beq.n	8000938 <_free_r+0x8c>
 80008b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008b8:	1f0c      	subs	r4, r1, #4
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bfb8      	it	lt
 80008be:	18e4      	addlt	r4, r4, r3
 80008c0:	f000 f8e0 	bl	8000a84 <__malloc_lock>
 80008c4:	4a1d      	ldr	r2, [pc, #116]	@ (800093c <_free_r+0x90>)
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	b933      	cbnz	r3, 80008d8 <_free_r+0x2c>
 80008ca:	6063      	str	r3, [r4, #4]
 80008cc:	6014      	str	r4, [r2, #0]
 80008ce:	4628      	mov	r0, r5
 80008d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008d4:	f000 b8dc 	b.w	8000a90 <__malloc_unlock>
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <_free_r+0x42>
 80008dc:	6820      	ldr	r0, [r4, #0]
 80008de:	1821      	adds	r1, r4, r0
 80008e0:	428b      	cmp	r3, r1
 80008e2:	bf01      	itttt	eq
 80008e4:	6819      	ldreq	r1, [r3, #0]
 80008e6:	685b      	ldreq	r3, [r3, #4]
 80008e8:	1809      	addeq	r1, r1, r0
 80008ea:	6021      	streq	r1, [r4, #0]
 80008ec:	e7ed      	b.n	80008ca <_free_r+0x1e>
 80008ee:	461a      	mov	r2, r3
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	b10b      	cbz	r3, 80008f8 <_free_r+0x4c>
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	d9fa      	bls.n	80008ee <_free_r+0x42>
 80008f8:	6811      	ldr	r1, [r2, #0]
 80008fa:	1850      	adds	r0, r2, r1
 80008fc:	42a0      	cmp	r0, r4
 80008fe:	d10b      	bne.n	8000918 <_free_r+0x6c>
 8000900:	6820      	ldr	r0, [r4, #0]
 8000902:	4401      	add	r1, r0
 8000904:	1850      	adds	r0, r2, r1
 8000906:	4283      	cmp	r3, r0
 8000908:	6011      	str	r1, [r2, #0]
 800090a:	d1e0      	bne.n	80008ce <_free_r+0x22>
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	6053      	str	r3, [r2, #4]
 8000912:	4408      	add	r0, r1
 8000914:	6010      	str	r0, [r2, #0]
 8000916:	e7da      	b.n	80008ce <_free_r+0x22>
 8000918:	d902      	bls.n	8000920 <_free_r+0x74>
 800091a:	230c      	movs	r3, #12
 800091c:	602b      	str	r3, [r5, #0]
 800091e:	e7d6      	b.n	80008ce <_free_r+0x22>
 8000920:	6820      	ldr	r0, [r4, #0]
 8000922:	1821      	adds	r1, r4, r0
 8000924:	428b      	cmp	r3, r1
 8000926:	bf04      	itt	eq
 8000928:	6819      	ldreq	r1, [r3, #0]
 800092a:	685b      	ldreq	r3, [r3, #4]
 800092c:	6063      	str	r3, [r4, #4]
 800092e:	bf04      	itt	eq
 8000930:	1809      	addeq	r1, r1, r0
 8000932:	6021      	streq	r1, [r4, #0]
 8000934:	6054      	str	r4, [r2, #4]
 8000936:	e7ca      	b.n	80008ce <_free_r+0x22>
 8000938:	bd38      	pop	{r3, r4, r5, pc}
 800093a:	bf00      	nop
 800093c:	200001b8 	.word	0x200001b8

08000940 <sbrk_aligned>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	4e0f      	ldr	r6, [pc, #60]	@ (8000980 <sbrk_aligned+0x40>)
 8000944:	460c      	mov	r4, r1
 8000946:	6831      	ldr	r1, [r6, #0]
 8000948:	4605      	mov	r5, r0
 800094a:	b911      	cbnz	r1, 8000952 <sbrk_aligned+0x12>
 800094c:	f000 fc34 	bl	80011b8 <_sbrk_r>
 8000950:	6030      	str	r0, [r6, #0]
 8000952:	4621      	mov	r1, r4
 8000954:	4628      	mov	r0, r5
 8000956:	f000 fc2f 	bl	80011b8 <_sbrk_r>
 800095a:	1c43      	adds	r3, r0, #1
 800095c:	d103      	bne.n	8000966 <sbrk_aligned+0x26>
 800095e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000962:	4620      	mov	r0, r4
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	1cc4      	adds	r4, r0, #3
 8000968:	f024 0403 	bic.w	r4, r4, #3
 800096c:	42a0      	cmp	r0, r4
 800096e:	d0f8      	beq.n	8000962 <sbrk_aligned+0x22>
 8000970:	1a21      	subs	r1, r4, r0
 8000972:	4628      	mov	r0, r5
 8000974:	f000 fc20 	bl	80011b8 <_sbrk_r>
 8000978:	3001      	adds	r0, #1
 800097a:	d1f2      	bne.n	8000962 <sbrk_aligned+0x22>
 800097c:	e7ef      	b.n	800095e <sbrk_aligned+0x1e>
 800097e:	bf00      	nop
 8000980:	200001b4 	.word	0x200001b4

08000984 <_malloc_r>:
 8000984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000988:	1ccd      	adds	r5, r1, #3
 800098a:	f025 0503 	bic.w	r5, r5, #3
 800098e:	3508      	adds	r5, #8
 8000990:	2d0c      	cmp	r5, #12
 8000992:	bf38      	it	cc
 8000994:	250c      	movcc	r5, #12
 8000996:	2d00      	cmp	r5, #0
 8000998:	4606      	mov	r6, r0
 800099a:	db01      	blt.n	80009a0 <_malloc_r+0x1c>
 800099c:	42a9      	cmp	r1, r5
 800099e:	d904      	bls.n	80009aa <_malloc_r+0x26>
 80009a0:	230c      	movs	r3, #12
 80009a2:	6033      	str	r3, [r6, #0]
 80009a4:	2000      	movs	r0, #0
 80009a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a80 <_malloc_r+0xfc>
 80009ae:	f000 f869 	bl	8000a84 <__malloc_lock>
 80009b2:	f8d8 3000 	ldr.w	r3, [r8]
 80009b6:	461c      	mov	r4, r3
 80009b8:	bb44      	cbnz	r4, 8000a0c <_malloc_r+0x88>
 80009ba:	4629      	mov	r1, r5
 80009bc:	4630      	mov	r0, r6
 80009be:	f7ff ffbf 	bl	8000940 <sbrk_aligned>
 80009c2:	1c43      	adds	r3, r0, #1
 80009c4:	4604      	mov	r4, r0
 80009c6:	d158      	bne.n	8000a7a <_malloc_r+0xf6>
 80009c8:	f8d8 4000 	ldr.w	r4, [r8]
 80009cc:	4627      	mov	r7, r4
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d143      	bne.n	8000a5a <_malloc_r+0xd6>
 80009d2:	2c00      	cmp	r4, #0
 80009d4:	d04b      	beq.n	8000a6e <_malloc_r+0xea>
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	4639      	mov	r1, r7
 80009da:	4630      	mov	r0, r6
 80009dc:	eb04 0903 	add.w	r9, r4, r3
 80009e0:	f000 fbea 	bl	80011b8 <_sbrk_r>
 80009e4:	4581      	cmp	r9, r0
 80009e6:	d142      	bne.n	8000a6e <_malloc_r+0xea>
 80009e8:	6821      	ldr	r1, [r4, #0]
 80009ea:	1a6d      	subs	r5, r5, r1
 80009ec:	4629      	mov	r1, r5
 80009ee:	4630      	mov	r0, r6
 80009f0:	f7ff ffa6 	bl	8000940 <sbrk_aligned>
 80009f4:	3001      	adds	r0, #1
 80009f6:	d03a      	beq.n	8000a6e <_malloc_r+0xea>
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	442b      	add	r3, r5
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	f8d8 3000 	ldr.w	r3, [r8]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	bb62      	cbnz	r2, 8000a60 <_malloc_r+0xdc>
 8000a06:	f8c8 7000 	str.w	r7, [r8]
 8000a0a:	e00f      	b.n	8000a2c <_malloc_r+0xa8>
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	1b52      	subs	r2, r2, r5
 8000a10:	d420      	bmi.n	8000a54 <_malloc_r+0xd0>
 8000a12:	2a0b      	cmp	r2, #11
 8000a14:	d917      	bls.n	8000a46 <_malloc_r+0xc2>
 8000a16:	1961      	adds	r1, r4, r5
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	6025      	str	r5, [r4, #0]
 8000a1c:	bf18      	it	ne
 8000a1e:	6059      	strne	r1, [r3, #4]
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	bf08      	it	eq
 8000a24:	f8c8 1000 	streq.w	r1, [r8]
 8000a28:	5162      	str	r2, [r4, r5]
 8000a2a:	604b      	str	r3, [r1, #4]
 8000a2c:	4630      	mov	r0, r6
 8000a2e:	f000 f82f 	bl	8000a90 <__malloc_unlock>
 8000a32:	f104 000b 	add.w	r0, r4, #11
 8000a36:	1d23      	adds	r3, r4, #4
 8000a38:	f020 0007 	bic.w	r0, r0, #7
 8000a3c:	1ac2      	subs	r2, r0, r3
 8000a3e:	bf1c      	itt	ne
 8000a40:	1a1b      	subne	r3, r3, r0
 8000a42:	50a3      	strne	r3, [r4, r2]
 8000a44:	e7af      	b.n	80009a6 <_malloc_r+0x22>
 8000a46:	6862      	ldr	r2, [r4, #4]
 8000a48:	42a3      	cmp	r3, r4
 8000a4a:	bf0c      	ite	eq
 8000a4c:	f8c8 2000 	streq.w	r2, [r8]
 8000a50:	605a      	strne	r2, [r3, #4]
 8000a52:	e7eb      	b.n	8000a2c <_malloc_r+0xa8>
 8000a54:	4623      	mov	r3, r4
 8000a56:	6864      	ldr	r4, [r4, #4]
 8000a58:	e7ae      	b.n	80009b8 <_malloc_r+0x34>
 8000a5a:	463c      	mov	r4, r7
 8000a5c:	687f      	ldr	r7, [r7, #4]
 8000a5e:	e7b6      	b.n	80009ce <_malloc_r+0x4a>
 8000a60:	461a      	mov	r2, r3
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	d1fb      	bne.n	8000a60 <_malloc_r+0xdc>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	6053      	str	r3, [r2, #4]
 8000a6c:	e7de      	b.n	8000a2c <_malloc_r+0xa8>
 8000a6e:	230c      	movs	r3, #12
 8000a70:	6033      	str	r3, [r6, #0]
 8000a72:	4630      	mov	r0, r6
 8000a74:	f000 f80c 	bl	8000a90 <__malloc_unlock>
 8000a78:	e794      	b.n	80009a4 <_malloc_r+0x20>
 8000a7a:	6005      	str	r5, [r0, #0]
 8000a7c:	e7d6      	b.n	8000a2c <_malloc_r+0xa8>
 8000a7e:	bf00      	nop
 8000a80:	200001b8 	.word	0x200001b8

08000a84 <__malloc_lock>:
 8000a84:	4801      	ldr	r0, [pc, #4]	@ (8000a8c <__malloc_lock+0x8>)
 8000a86:	f7ff bf0f 	b.w	80008a8 <__retarget_lock_acquire_recursive>
 8000a8a:	bf00      	nop
 8000a8c:	200001b0 	.word	0x200001b0

08000a90 <__malloc_unlock>:
 8000a90:	4801      	ldr	r0, [pc, #4]	@ (8000a98 <__malloc_unlock+0x8>)
 8000a92:	f7ff bf0a 	b.w	80008aa <__retarget_lock_release_recursive>
 8000a96:	bf00      	nop
 8000a98:	200001b0 	.word	0x200001b0

08000a9c <_sungetc_r>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	1c4b      	adds	r3, r1, #1
 8000aa0:	4614      	mov	r4, r2
 8000aa2:	d103      	bne.n	8000aac <_sungetc_r+0x10>
 8000aa4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
 8000aac:	8993      	ldrh	r3, [r2, #12]
 8000aae:	f023 0320 	bic.w	r3, r3, #32
 8000ab2:	8193      	strh	r3, [r2, #12]
 8000ab4:	6853      	ldr	r3, [r2, #4]
 8000ab6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ab8:	b2cd      	uxtb	r5, r1
 8000aba:	b18a      	cbz	r2, 8000ae0 <_sungetc_r+0x44>
 8000abc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	dd08      	ble.n	8000ad4 <_sungetc_r+0x38>
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	6022      	str	r2, [r4, #0]
 8000ac8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000acc:	6863      	ldr	r3, [r4, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	6063      	str	r3, [r4, #4]
 8000ad2:	e7e9      	b.n	8000aa8 <_sungetc_r+0xc>
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	f000 fb34 	bl	8001142 <__submore>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d0f1      	beq.n	8000ac2 <_sungetc_r+0x26>
 8000ade:	e7e1      	b.n	8000aa4 <_sungetc_r+0x8>
 8000ae0:	6921      	ldr	r1, [r4, #16]
 8000ae2:	6822      	ldr	r2, [r4, #0]
 8000ae4:	b141      	cbz	r1, 8000af8 <_sungetc_r+0x5c>
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	d206      	bcs.n	8000af8 <_sungetc_r+0x5c>
 8000aea:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000aee:	42a9      	cmp	r1, r5
 8000af0:	d102      	bne.n	8000af8 <_sungetc_r+0x5c>
 8000af2:	3a01      	subs	r2, #1
 8000af4:	6022      	str	r2, [r4, #0]
 8000af6:	e7ea      	b.n	8000ace <_sungetc_r+0x32>
 8000af8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000afc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b02:	2303      	movs	r3, #3
 8000b04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000b06:	4623      	mov	r3, r4
 8000b08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000b0c:	6023      	str	r3, [r4, #0]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e7de      	b.n	8000ad0 <_sungetc_r+0x34>

08000b12 <__ssrefill_r>:
 8000b12:	b510      	push	{r4, lr}
 8000b14:	460c      	mov	r4, r1
 8000b16:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000b18:	b169      	cbz	r1, 8000b36 <__ssrefill_r+0x24>
 8000b1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d001      	beq.n	8000b26 <__ssrefill_r+0x14>
 8000b22:	f7ff fec3 	bl	80008ac <_free_r>
 8000b26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b28:	6063      	str	r3, [r4, #4]
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	6360      	str	r0, [r4, #52]	@ 0x34
 8000b2e:	b113      	cbz	r3, 8000b36 <__ssrefill_r+0x24>
 8000b30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000b32:	6023      	str	r3, [r4, #0]
 8000b34:	bd10      	pop	{r4, pc}
 8000b36:	6923      	ldr	r3, [r4, #16]
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	6063      	str	r3, [r4, #4]
 8000b3e:	89a3      	ldrh	r3, [r4, #12]
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	81a3      	strh	r3, [r4, #12]
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b4a:	e7f3      	b.n	8000b34 <__ssrefill_r+0x22>

08000b4c <__ssvfiscanf_r>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	460c      	mov	r4, r1
 8000b52:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000b56:	2100      	movs	r1, #0
 8000b58:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000b5c:	49a5      	ldr	r1, [pc, #660]	@ (8000df4 <__ssvfiscanf_r+0x2a8>)
 8000b5e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000b60:	f10d 0804 	add.w	r8, sp, #4
 8000b64:	49a4      	ldr	r1, [pc, #656]	@ (8000df8 <__ssvfiscanf_r+0x2ac>)
 8000b66:	4fa5      	ldr	r7, [pc, #660]	@ (8000dfc <__ssvfiscanf_r+0x2b0>)
 8000b68:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	7813      	ldrb	r3, [r2, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 8158 	beq.w	8000e2a <__ssvfiscanf_r+0x2de>
 8000b7a:	5cf9      	ldrb	r1, [r7, r3]
 8000b7c:	f011 0108 	ands.w	r1, r1, #8
 8000b80:	f102 0501 	add.w	r5, r2, #1
 8000b84:	d019      	beq.n	8000bba <__ssvfiscanf_r+0x6e>
 8000b86:	6863      	ldr	r3, [r4, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd0f      	ble.n	8000bac <__ssvfiscanf_r+0x60>
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	5cba      	ldrb	r2, [r7, r2]
 8000b92:	0712      	lsls	r2, r2, #28
 8000b94:	d401      	bmi.n	8000b9a <__ssvfiscanf_r+0x4e>
 8000b96:	462a      	mov	r2, r5
 8000b98:	e7eb      	b.n	8000b72 <__ssvfiscanf_r+0x26>
 8000b9a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000b9c:	3201      	adds	r2, #1
 8000b9e:	9245      	str	r2, [sp, #276]	@ 0x114
 8000ba0:	6862      	ldr	r2, [r4, #4]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	6062      	str	r2, [r4, #4]
 8000ba8:	6023      	str	r3, [r4, #0]
 8000baa:	e7ec      	b.n	8000b86 <__ssvfiscanf_r+0x3a>
 8000bac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000bae:	4621      	mov	r1, r4
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	4798      	blx	r3
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d0e9      	beq.n	8000b8c <__ssvfiscanf_r+0x40>
 8000bb8:	e7ed      	b.n	8000b96 <__ssvfiscanf_r+0x4a>
 8000bba:	2b25      	cmp	r3, #37	@ 0x25
 8000bbc:	d012      	beq.n	8000be4 <__ssvfiscanf_r+0x98>
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	6863      	ldr	r3, [r4, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f340 8093 	ble.w	8000cee <__ssvfiscanf_r+0x1a2>
 8000bc8:	6822      	ldr	r2, [r4, #0]
 8000bca:	7813      	ldrb	r3, [r2, #0]
 8000bcc:	454b      	cmp	r3, r9
 8000bce:	f040 812c 	bne.w	8000e2a <__ssvfiscanf_r+0x2de>
 8000bd2:	6863      	ldr	r3, [r4, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	6063      	str	r3, [r4, #4]
 8000bd8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000bda:	3201      	adds	r2, #1
 8000bdc:	3301      	adds	r3, #1
 8000bde:	6022      	str	r2, [r4, #0]
 8000be0:	9345      	str	r3, [sp, #276]	@ 0x114
 8000be2:	e7d8      	b.n	8000b96 <__ssvfiscanf_r+0x4a>
 8000be4:	9141      	str	r1, [sp, #260]	@ 0x104
 8000be6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000be8:	7853      	ldrb	r3, [r2, #1]
 8000bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bec:	bf02      	ittt	eq
 8000bee:	2310      	moveq	r3, #16
 8000bf0:	1c95      	addeq	r5, r2, #2
 8000bf2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000bf4:	220a      	movs	r2, #10
 8000bf6:	46a9      	mov	r9, r5
 8000bf8:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000bfc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000c00:	2b09      	cmp	r3, #9
 8000c02:	d91e      	bls.n	8000c42 <__ssvfiscanf_r+0xf6>
 8000c04:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8000e00 <__ssvfiscanf_r+0x2b4>
 8000c08:	2203      	movs	r2, #3
 8000c0a:	4650      	mov	r0, sl
 8000c0c:	f7ff fae8 	bl	80001e0 <memchr>
 8000c10:	b138      	cbz	r0, 8000c22 <__ssvfiscanf_r+0xd6>
 8000c12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000c14:	eba0 000a 	sub.w	r0, r0, sl
 8000c18:	2301      	movs	r3, #1
 8000c1a:	4083      	lsls	r3, r0
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	9341      	str	r3, [sp, #260]	@ 0x104
 8000c20:	464d      	mov	r5, r9
 8000c22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000c26:	2b78      	cmp	r3, #120	@ 0x78
 8000c28:	d806      	bhi.n	8000c38 <__ssvfiscanf_r+0xec>
 8000c2a:	2b57      	cmp	r3, #87	@ 0x57
 8000c2c:	d810      	bhi.n	8000c50 <__ssvfiscanf_r+0x104>
 8000c2e:	2b25      	cmp	r3, #37	@ 0x25
 8000c30:	d0c5      	beq.n	8000bbe <__ssvfiscanf_r+0x72>
 8000c32:	d857      	bhi.n	8000ce4 <__ssvfiscanf_r+0x198>
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d065      	beq.n	8000d04 <__ssvfiscanf_r+0x1b8>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	9342      	str	r3, [sp, #264]	@ 0x108
 8000c40:	e078      	b.n	8000d34 <__ssvfiscanf_r+0x1e8>
 8000c42:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000c44:	fb02 1103 	mla	r1, r2, r3, r1
 8000c48:	3930      	subs	r1, #48	@ 0x30
 8000c4a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000c4c:	464d      	mov	r5, r9
 8000c4e:	e7d2      	b.n	8000bf6 <__ssvfiscanf_r+0xaa>
 8000c50:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000c54:	2a20      	cmp	r2, #32
 8000c56:	d8ef      	bhi.n	8000c38 <__ssvfiscanf_r+0xec>
 8000c58:	a101      	add	r1, pc, #4	@ (adr r1, 8000c60 <__ssvfiscanf_r+0x114>)
 8000c5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000d13 	.word	0x08000d13
 8000c64:	08000c39 	.word	0x08000c39
 8000c68:	08000c39 	.word	0x08000c39
 8000c6c:	08000d6d 	.word	0x08000d6d
 8000c70:	08000c39 	.word	0x08000c39
 8000c74:	08000c39 	.word	0x08000c39
 8000c78:	08000c39 	.word	0x08000c39
 8000c7c:	08000c39 	.word	0x08000c39
 8000c80:	08000c39 	.word	0x08000c39
 8000c84:	08000c39 	.word	0x08000c39
 8000c88:	08000c39 	.word	0x08000c39
 8000c8c:	08000d83 	.word	0x08000d83
 8000c90:	08000d69 	.word	0x08000d69
 8000c94:	08000ceb 	.word	0x08000ceb
 8000c98:	08000ceb 	.word	0x08000ceb
 8000c9c:	08000ceb 	.word	0x08000ceb
 8000ca0:	08000c39 	.word	0x08000c39
 8000ca4:	08000d25 	.word	0x08000d25
 8000ca8:	08000c39 	.word	0x08000c39
 8000cac:	08000c39 	.word	0x08000c39
 8000cb0:	08000c39 	.word	0x08000c39
 8000cb4:	08000c39 	.word	0x08000c39
 8000cb8:	08000d93 	.word	0x08000d93
 8000cbc:	08000d2d 	.word	0x08000d2d
 8000cc0:	08000d0b 	.word	0x08000d0b
 8000cc4:	08000c39 	.word	0x08000c39
 8000cc8:	08000c39 	.word	0x08000c39
 8000ccc:	08000d8f 	.word	0x08000d8f
 8000cd0:	08000c39 	.word	0x08000c39
 8000cd4:	08000d69 	.word	0x08000d69
 8000cd8:	08000c39 	.word	0x08000c39
 8000cdc:	08000c39 	.word	0x08000c39
 8000ce0:	08000d13 	.word	0x08000d13
 8000ce4:	3b45      	subs	r3, #69	@ 0x45
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d8a6      	bhi.n	8000c38 <__ssvfiscanf_r+0xec>
 8000cea:	2305      	movs	r3, #5
 8000cec:	e021      	b.n	8000d32 <__ssvfiscanf_r+0x1e6>
 8000cee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4798      	blx	r3
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	f43f af66 	beq.w	8000bc8 <__ssvfiscanf_r+0x7c>
 8000cfc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	f040 808b 	bne.w	8000e1a <__ssvfiscanf_r+0x2ce>
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d08:	e08b      	b.n	8000e22 <__ssvfiscanf_r+0x2d6>
 8000d0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000d0c:	f042 0220 	orr.w	r2, r2, #32
 8000d10:	9241      	str	r2, [sp, #260]	@ 0x104
 8000d12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d18:	9241      	str	r2, [sp, #260]	@ 0x104
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8000d1e:	9242      	str	r2, [sp, #264]	@ 0x108
 8000d20:	d902      	bls.n	8000d28 <__ssvfiscanf_r+0x1dc>
 8000d22:	e005      	b.n	8000d30 <__ssvfiscanf_r+0x1e4>
 8000d24:	2300      	movs	r3, #0
 8000d26:	9342      	str	r3, [sp, #264]	@ 0x108
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e002      	b.n	8000d32 <__ssvfiscanf_r+0x1e6>
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	9342      	str	r3, [sp, #264]	@ 0x108
 8000d30:	2304      	movs	r3, #4
 8000d32:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000d34:	6863      	ldr	r3, [r4, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	dd39      	ble.n	8000dae <__ssvfiscanf_r+0x262>
 8000d3a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000d3c:	0659      	lsls	r1, r3, #25
 8000d3e:	d404      	bmi.n	8000d4a <__ssvfiscanf_r+0x1fe>
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	5cba      	ldrb	r2, [r7, r2]
 8000d46:	0712      	lsls	r2, r2, #28
 8000d48:	d438      	bmi.n	8000dbc <__ssvfiscanf_r+0x270>
 8000d4a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	dc47      	bgt.n	8000de0 <__ssvfiscanf_r+0x294>
 8000d50:	466b      	mov	r3, sp
 8000d52:	4622      	mov	r2, r4
 8000d54:	a941      	add	r1, sp, #260	@ 0x104
 8000d56:	4630      	mov	r0, r6
 8000d58:	f000 f86c 	bl	8000e34 <_scanf_chars>
 8000d5c:	2801      	cmp	r0, #1
 8000d5e:	d064      	beq.n	8000e2a <__ssvfiscanf_r+0x2de>
 8000d60:	2802      	cmp	r0, #2
 8000d62:	f47f af18 	bne.w	8000b96 <__ssvfiscanf_r+0x4a>
 8000d66:	e7c9      	b.n	8000cfc <__ssvfiscanf_r+0x1b0>
 8000d68:	220a      	movs	r2, #10
 8000d6a:	e7d7      	b.n	8000d1c <__ssvfiscanf_r+0x1d0>
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	4640      	mov	r0, r8
 8000d70:	f000 f9ae 	bl	80010d0 <__sccl>
 8000d74:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d7a:	9341      	str	r3, [sp, #260]	@ 0x104
 8000d7c:	4605      	mov	r5, r0
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e7d7      	b.n	8000d32 <__ssvfiscanf_r+0x1e6>
 8000d82:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d88:	9341      	str	r3, [sp, #260]	@ 0x104
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e7d1      	b.n	8000d32 <__ssvfiscanf_r+0x1e6>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e7cf      	b.n	8000d32 <__ssvfiscanf_r+0x1e6>
 8000d92:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000d94:	06c3      	lsls	r3, r0, #27
 8000d96:	f53f aefe 	bmi.w	8000b96 <__ssvfiscanf_r+0x4a>
 8000d9a:	9b00      	ldr	r3, [sp, #0]
 8000d9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000d9e:	1d19      	adds	r1, r3, #4
 8000da0:	9100      	str	r1, [sp, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	07c0      	lsls	r0, r0, #31
 8000da6:	bf4c      	ite	mi
 8000da8:	801a      	strhmi	r2, [r3, #0]
 8000daa:	601a      	strpl	r2, [r3, #0]
 8000dac:	e6f3      	b.n	8000b96 <__ssvfiscanf_r+0x4a>
 8000dae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000db0:	4621      	mov	r1, r4
 8000db2:	4630      	mov	r0, r6
 8000db4:	4798      	blx	r3
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d0bf      	beq.n	8000d3a <__ssvfiscanf_r+0x1ee>
 8000dba:	e79f      	b.n	8000cfc <__ssvfiscanf_r+0x1b0>
 8000dbc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000dbe:	3201      	adds	r2, #1
 8000dc0:	9245      	str	r2, [sp, #276]	@ 0x114
 8000dc2:	6862      	ldr	r2, [r4, #4]
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	6062      	str	r2, [r4, #4]
 8000dca:	dd02      	ble.n	8000dd2 <__ssvfiscanf_r+0x286>
 8000dcc:	3301      	adds	r3, #1
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	e7b6      	b.n	8000d40 <__ssvfiscanf_r+0x1f4>
 8000dd2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	4798      	blx	r3
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d0b0      	beq.n	8000d40 <__ssvfiscanf_r+0x1f4>
 8000dde:	e78d      	b.n	8000cfc <__ssvfiscanf_r+0x1b0>
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	dc0f      	bgt.n	8000e04 <__ssvfiscanf_r+0x2b8>
 8000de4:	466b      	mov	r3, sp
 8000de6:	4622      	mov	r2, r4
 8000de8:	a941      	add	r1, sp, #260	@ 0x104
 8000dea:	4630      	mov	r0, r6
 8000dec:	f000 f87c 	bl	8000ee8 <_scanf_i>
 8000df0:	e7b4      	b.n	8000d5c <__ssvfiscanf_r+0x210>
 8000df2:	bf00      	nop
 8000df4:	08000a9d 	.word	0x08000a9d
 8000df8:	08000b13 	.word	0x08000b13
 8000dfc:	080014c8 	.word	0x080014c8
 8000e00:	080014a8 	.word	0x080014a8
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <__ssvfiscanf_r+0x2e4>)
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f43f aec5 	beq.w	8000b96 <__ssvfiscanf_r+0x4a>
 8000e0c:	466b      	mov	r3, sp
 8000e0e:	4622      	mov	r2, r4
 8000e10:	a941      	add	r1, sp, #260	@ 0x104
 8000e12:	4630      	mov	r0, r6
 8000e14:	f3af 8000 	nop.w
 8000e18:	e7a0      	b.n	8000d5c <__ssvfiscanf_r+0x210>
 8000e1a:	89a3      	ldrh	r3, [r4, #12]
 8000e1c:	065b      	lsls	r3, r3, #25
 8000e1e:	f53f af71 	bmi.w	8000d04 <__ssvfiscanf_r+0x1b8>
 8000e22:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000e2c:	e7f9      	b.n	8000e22 <__ssvfiscanf_r+0x2d6>
 8000e2e:	bf00      	nop
 8000e30:	00000000 	.word	0x00000000

08000e34 <_scanf_chars>:
 8000e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e38:	4615      	mov	r5, r2
 8000e3a:	688a      	ldr	r2, [r1, #8]
 8000e3c:	4680      	mov	r8, r0
 8000e3e:	460c      	mov	r4, r1
 8000e40:	b932      	cbnz	r2, 8000e50 <_scanf_chars+0x1c>
 8000e42:	698a      	ldr	r2, [r1, #24]
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	bf14      	ite	ne
 8000e48:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8000e4c:	2201      	moveq	r2, #1
 8000e4e:	608a      	str	r2, [r1, #8]
 8000e50:	6822      	ldr	r2, [r4, #0]
 8000e52:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000ee4 <_scanf_chars+0xb0>
 8000e56:	06d1      	lsls	r1, r2, #27
 8000e58:	bf5f      	itttt	pl
 8000e5a:	681a      	ldrpl	r2, [r3, #0]
 8000e5c:	1d11      	addpl	r1, r2, #4
 8000e5e:	6019      	strpl	r1, [r3, #0]
 8000e60:	6816      	ldrpl	r6, [r2, #0]
 8000e62:	2700      	movs	r7, #0
 8000e64:	69a0      	ldr	r0, [r4, #24]
 8000e66:	b188      	cbz	r0, 8000e8c <_scanf_chars+0x58>
 8000e68:	2801      	cmp	r0, #1
 8000e6a:	d107      	bne.n	8000e7c <_scanf_chars+0x48>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	6963      	ldr	r3, [r4, #20]
 8000e72:	5c9b      	ldrb	r3, [r3, r2]
 8000e74:	b953      	cbnz	r3, 8000e8c <_scanf_chars+0x58>
 8000e76:	2f00      	cmp	r7, #0
 8000e78:	d031      	beq.n	8000ede <_scanf_chars+0xaa>
 8000e7a:	e022      	b.n	8000ec2 <_scanf_chars+0x8e>
 8000e7c:	2802      	cmp	r0, #2
 8000e7e:	d120      	bne.n	8000ec2 <_scanf_chars+0x8e>
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	f819 3003 	ldrb.w	r3, [r9, r3]
 8000e88:	071b      	lsls	r3, r3, #28
 8000e8a:	d41a      	bmi.n	8000ec2 <_scanf_chars+0x8e>
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	06da      	lsls	r2, r3, #27
 8000e90:	bf5e      	ittt	pl
 8000e92:	682b      	ldrpl	r3, [r5, #0]
 8000e94:	781b      	ldrbpl	r3, [r3, #0]
 8000e96:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000e9a:	682a      	ldr	r2, [r5, #0]
 8000e9c:	686b      	ldr	r3, [r5, #4]
 8000e9e:	3201      	adds	r2, #1
 8000ea0:	602a      	str	r2, [r5, #0]
 8000ea2:	68a2      	ldr	r2, [r4, #8]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	606b      	str	r3, [r5, #4]
 8000eaa:	3701      	adds	r7, #1
 8000eac:	60a2      	str	r2, [r4, #8]
 8000eae:	b142      	cbz	r2, 8000ec2 <_scanf_chars+0x8e>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	dcd7      	bgt.n	8000e64 <_scanf_chars+0x30>
 8000eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000eb8:	4629      	mov	r1, r5
 8000eba:	4640      	mov	r0, r8
 8000ebc:	4798      	blx	r3
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d0d0      	beq.n	8000e64 <_scanf_chars+0x30>
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f013 0310 	ands.w	r3, r3, #16
 8000ec8:	d105      	bne.n	8000ed6 <_scanf_chars+0xa2>
 8000eca:	68e2      	ldr	r2, [r4, #12]
 8000ecc:	3201      	adds	r2, #1
 8000ece:	60e2      	str	r2, [r4, #12]
 8000ed0:	69a2      	ldr	r2, [r4, #24]
 8000ed2:	b102      	cbz	r2, 8000ed6 <_scanf_chars+0xa2>
 8000ed4:	7033      	strb	r3, [r6, #0]
 8000ed6:	6923      	ldr	r3, [r4, #16]
 8000ed8:	443b      	add	r3, r7
 8000eda:	6123      	str	r3, [r4, #16]
 8000edc:	2000      	movs	r0, #0
 8000ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ee2:	bf00      	nop
 8000ee4:	080014c8 	.word	0x080014c8

08000ee8 <_scanf_i>:
 8000ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eec:	4698      	mov	r8, r3
 8000eee:	4b74      	ldr	r3, [pc, #464]	@ (80010c0 <_scanf_i+0x1d8>)
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	4682      	mov	sl, r0
 8000ef4:	4616      	mov	r6, r2
 8000ef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000efa:	b087      	sub	sp, #28
 8000efc:	ab03      	add	r3, sp, #12
 8000efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f02:	4b70      	ldr	r3, [pc, #448]	@ (80010c4 <_scanf_i+0x1dc>)
 8000f04:	69a1      	ldr	r1, [r4, #24]
 8000f06:	4a70      	ldr	r2, [pc, #448]	@ (80010c8 <_scanf_i+0x1e0>)
 8000f08:	2903      	cmp	r1, #3
 8000f0a:	bf08      	it	eq
 8000f0c:	461a      	moveq	r2, r3
 8000f0e:	68a3      	ldr	r3, [r4, #8]
 8000f10:	9201      	str	r2, [sp, #4]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8000f18:	bf88      	it	hi
 8000f1a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8000f1e:	4627      	mov	r7, r4
 8000f20:	bf82      	ittt	hi
 8000f22:	eb03 0905 	addhi.w	r9, r3, r5
 8000f26:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8000f2a:	60a3      	strhi	r3, [r4, #8]
 8000f2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000f30:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8000f34:	bf98      	it	ls
 8000f36:	f04f 0900 	movls.w	r9, #0
 8000f3a:	6023      	str	r3, [r4, #0]
 8000f3c:	463d      	mov	r5, r7
 8000f3e:	f04f 0b00 	mov.w	fp, #0
 8000f42:	6831      	ldr	r1, [r6, #0]
 8000f44:	ab03      	add	r3, sp, #12
 8000f46:	7809      	ldrb	r1, [r1, #0]
 8000f48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	f7ff f947 	bl	80001e0 <memchr>
 8000f52:	b328      	cbz	r0, 8000fa0 <_scanf_i+0xb8>
 8000f54:	f1bb 0f01 	cmp.w	fp, #1
 8000f58:	d159      	bne.n	800100e <_scanf_i+0x126>
 8000f5a:	6862      	ldr	r2, [r4, #4]
 8000f5c:	b92a      	cbnz	r2, 8000f6a <_scanf_i+0x82>
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	2108      	movs	r1, #8
 8000f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f66:	6061      	str	r1, [r4, #4]
 8000f68:	6022      	str	r2, [r4, #0]
 8000f6a:	6822      	ldr	r2, [r4, #0]
 8000f6c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8000f70:	6022      	str	r2, [r4, #0]
 8000f72:	68a2      	ldr	r2, [r4, #8]
 8000f74:	1e51      	subs	r1, r2, #1
 8000f76:	60a1      	str	r1, [r4, #8]
 8000f78:	b192      	cbz	r2, 8000fa0 <_scanf_i+0xb8>
 8000f7a:	6832      	ldr	r2, [r6, #0]
 8000f7c:	1c51      	adds	r1, r2, #1
 8000f7e:	6031      	str	r1, [r6, #0]
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	f805 2b01 	strb.w	r2, [r5], #1
 8000f86:	6872      	ldr	r2, [r6, #4]
 8000f88:	3a01      	subs	r2, #1
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	6072      	str	r2, [r6, #4]
 8000f8e:	dc07      	bgt.n	8000fa0 <_scanf_i+0xb8>
 8000f90:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8000f94:	4631      	mov	r1, r6
 8000f96:	4650      	mov	r0, sl
 8000f98:	4790      	blx	r2
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	f040 8085 	bne.w	80010aa <_scanf_i+0x1c2>
 8000fa0:	f10b 0b01 	add.w	fp, fp, #1
 8000fa4:	f1bb 0f03 	cmp.w	fp, #3
 8000fa8:	d1cb      	bne.n	8000f42 <_scanf_i+0x5a>
 8000faa:	6863      	ldr	r3, [r4, #4]
 8000fac:	b90b      	cbnz	r3, 8000fb2 <_scanf_i+0xca>
 8000fae:	230a      	movs	r3, #10
 8000fb0:	6063      	str	r3, [r4, #4]
 8000fb2:	6863      	ldr	r3, [r4, #4]
 8000fb4:	4945      	ldr	r1, [pc, #276]	@ (80010cc <_scanf_i+0x1e4>)
 8000fb6:	6960      	ldr	r0, [r4, #20]
 8000fb8:	1ac9      	subs	r1, r1, r3
 8000fba:	f000 f889 	bl	80010d0 <__sccl>
 8000fbe:	f04f 0b00 	mov.w	fp, #0
 8000fc2:	68a3      	ldr	r3, [r4, #8]
 8000fc4:	6822      	ldr	r2, [r4, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03d      	beq.n	8001046 <_scanf_i+0x15e>
 8000fca:	6831      	ldr	r1, [r6, #0]
 8000fcc:	6960      	ldr	r0, [r4, #20]
 8000fce:	f891 c000 	ldrb.w	ip, [r1]
 8000fd2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d035      	beq.n	8001046 <_scanf_i+0x15e>
 8000fda:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8000fde:	d124      	bne.n	800102a <_scanf_i+0x142>
 8000fe0:	0510      	lsls	r0, r2, #20
 8000fe2:	d522      	bpl.n	800102a <_scanf_i+0x142>
 8000fe4:	f10b 0b01 	add.w	fp, fp, #1
 8000fe8:	f1b9 0f00 	cmp.w	r9, #0
 8000fec:	d003      	beq.n	8000ff6 <_scanf_i+0x10e>
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8000ff4:	60a3      	str	r3, [r4, #8]
 8000ff6:	6873      	ldr	r3, [r6, #4]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	6073      	str	r3, [r6, #4]
 8000ffe:	dd1b      	ble.n	8001038 <_scanf_i+0x150>
 8001000:	6833      	ldr	r3, [r6, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	6033      	str	r3, [r6, #0]
 8001006:	68a3      	ldr	r3, [r4, #8]
 8001008:	3b01      	subs	r3, #1
 800100a:	60a3      	str	r3, [r4, #8]
 800100c:	e7d9      	b.n	8000fc2 <_scanf_i+0xda>
 800100e:	f1bb 0f02 	cmp.w	fp, #2
 8001012:	d1ae      	bne.n	8000f72 <_scanf_i+0x8a>
 8001014:	6822      	ldr	r2, [r4, #0]
 8001016:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800101a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800101e:	d1bf      	bne.n	8000fa0 <_scanf_i+0xb8>
 8001020:	2110      	movs	r1, #16
 8001022:	6061      	str	r1, [r4, #4]
 8001024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001028:	e7a2      	b.n	8000f70 <_scanf_i+0x88>
 800102a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800102e:	6022      	str	r2, [r4, #0]
 8001030:	780b      	ldrb	r3, [r1, #0]
 8001032:	f805 3b01 	strb.w	r3, [r5], #1
 8001036:	e7de      	b.n	8000ff6 <_scanf_i+0x10e>
 8001038:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800103c:	4631      	mov	r1, r6
 800103e:	4650      	mov	r0, sl
 8001040:	4798      	blx	r3
 8001042:	2800      	cmp	r0, #0
 8001044:	d0df      	beq.n	8001006 <_scanf_i+0x11e>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	05d9      	lsls	r1, r3, #23
 800104a:	d50d      	bpl.n	8001068 <_scanf_i+0x180>
 800104c:	42bd      	cmp	r5, r7
 800104e:	d909      	bls.n	8001064 <_scanf_i+0x17c>
 8001050:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001054:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001058:	4632      	mov	r2, r6
 800105a:	4650      	mov	r0, sl
 800105c:	4798      	blx	r3
 800105e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8001062:	464d      	mov	r5, r9
 8001064:	42bd      	cmp	r5, r7
 8001066:	d028      	beq.n	80010ba <_scanf_i+0x1d2>
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	f012 0210 	ands.w	r2, r2, #16
 800106e:	d113      	bne.n	8001098 <_scanf_i+0x1b0>
 8001070:	702a      	strb	r2, [r5, #0]
 8001072:	6863      	ldr	r3, [r4, #4]
 8001074:	9e01      	ldr	r6, [sp, #4]
 8001076:	4639      	mov	r1, r7
 8001078:	4650      	mov	r0, sl
 800107a:	47b0      	blx	r6
 800107c:	f8d8 3000 	ldr.w	r3, [r8]
 8001080:	6821      	ldr	r1, [r4, #0]
 8001082:	1d1a      	adds	r2, r3, #4
 8001084:	f8c8 2000 	str.w	r2, [r8]
 8001088:	f011 0f20 	tst.w	r1, #32
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	d00f      	beq.n	80010b0 <_scanf_i+0x1c8>
 8001090:	6018      	str	r0, [r3, #0]
 8001092:	68e3      	ldr	r3, [r4, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60e3      	str	r3, [r4, #12]
 8001098:	6923      	ldr	r3, [r4, #16]
 800109a:	1bed      	subs	r5, r5, r7
 800109c:	445d      	add	r5, fp
 800109e:	442b      	add	r3, r5
 80010a0:	6123      	str	r3, [r4, #16]
 80010a2:	2000      	movs	r0, #0
 80010a4:	b007      	add	sp, #28
 80010a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010aa:	f04f 0b00 	mov.w	fp, #0
 80010ae:	e7ca      	b.n	8001046 <_scanf_i+0x15e>
 80010b0:	07ca      	lsls	r2, r1, #31
 80010b2:	bf4c      	ite	mi
 80010b4:	8018      	strhmi	r0, [r3, #0]
 80010b6:	6018      	strpl	r0, [r3, #0]
 80010b8:	e7eb      	b.n	8001092 <_scanf_i+0x1aa>
 80010ba:	2001      	movs	r0, #1
 80010bc:	e7f2      	b.n	80010a4 <_scanf_i+0x1bc>
 80010be:	bf00      	nop
 80010c0:	0800149c 	.word	0x0800149c
 80010c4:	08001345 	.word	0x08001345
 80010c8:	08001425 	.word	0x08001425
 80010cc:	080014bc 	.word	0x080014bc

080010d0 <__sccl>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	780b      	ldrb	r3, [r1, #0]
 80010d4:	4604      	mov	r4, r0
 80010d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80010d8:	bf0b      	itete	eq
 80010da:	784b      	ldrbeq	r3, [r1, #1]
 80010dc:	1c4a      	addne	r2, r1, #1
 80010de:	1c8a      	addeq	r2, r1, #2
 80010e0:	2100      	movne	r1, #0
 80010e2:	bf08      	it	eq
 80010e4:	2101      	moveq	r1, #1
 80010e6:	3801      	subs	r0, #1
 80010e8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80010ec:	f800 1f01 	strb.w	r1, [r0, #1]!
 80010f0:	42a8      	cmp	r0, r5
 80010f2:	d1fb      	bne.n	80010ec <__sccl+0x1c>
 80010f4:	b90b      	cbnz	r3, 80010fa <__sccl+0x2a>
 80010f6:	1e50      	subs	r0, r2, #1
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
 80010fa:	f081 0101 	eor.w	r1, r1, #1
 80010fe:	54e1      	strb	r1, [r4, r3]
 8001100:	4610      	mov	r0, r2
 8001102:	4602      	mov	r2, r0
 8001104:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001108:	2d2d      	cmp	r5, #45	@ 0x2d
 800110a:	d005      	beq.n	8001118 <__sccl+0x48>
 800110c:	2d5d      	cmp	r5, #93	@ 0x5d
 800110e:	d016      	beq.n	800113e <__sccl+0x6e>
 8001110:	2d00      	cmp	r5, #0
 8001112:	d0f1      	beq.n	80010f8 <__sccl+0x28>
 8001114:	462b      	mov	r3, r5
 8001116:	e7f2      	b.n	80010fe <__sccl+0x2e>
 8001118:	7846      	ldrb	r6, [r0, #1]
 800111a:	2e5d      	cmp	r6, #93	@ 0x5d
 800111c:	d0fa      	beq.n	8001114 <__sccl+0x44>
 800111e:	42b3      	cmp	r3, r6
 8001120:	dcf8      	bgt.n	8001114 <__sccl+0x44>
 8001122:	3002      	adds	r0, #2
 8001124:	461a      	mov	r2, r3
 8001126:	3201      	adds	r2, #1
 8001128:	4296      	cmp	r6, r2
 800112a:	54a1      	strb	r1, [r4, r2]
 800112c:	dcfb      	bgt.n	8001126 <__sccl+0x56>
 800112e:	1af2      	subs	r2, r6, r3
 8001130:	3a01      	subs	r2, #1
 8001132:	1c5d      	adds	r5, r3, #1
 8001134:	42b3      	cmp	r3, r6
 8001136:	bfa8      	it	ge
 8001138:	2200      	movge	r2, #0
 800113a:	18ab      	adds	r3, r5, r2
 800113c:	e7e1      	b.n	8001102 <__sccl+0x32>
 800113e:	4610      	mov	r0, r2
 8001140:	e7da      	b.n	80010f8 <__sccl+0x28>

08001142 <__submore>:
 8001142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001146:	460c      	mov	r4, r1
 8001148:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800114a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800114e:	4299      	cmp	r1, r3
 8001150:	d11d      	bne.n	800118e <__submore+0x4c>
 8001152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001156:	f7ff fc15 	bl	8000984 <_malloc_r>
 800115a:	b918      	cbnz	r0, 8001164 <__submore+0x22>
 800115c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001168:	63a3      	str	r3, [r4, #56]	@ 0x38
 800116a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800116e:	6360      	str	r0, [r4, #52]	@ 0x34
 8001170:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8001174:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001178:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800117c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001180:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8001184:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8001188:	6020      	str	r0, [r4, #0]
 800118a:	2000      	movs	r0, #0
 800118c:	e7e8      	b.n	8001160 <__submore+0x1e>
 800118e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8001190:	0077      	lsls	r7, r6, #1
 8001192:	463a      	mov	r2, r7
 8001194:	f000 f82e 	bl	80011f4 <_realloc_r>
 8001198:	4605      	mov	r5, r0
 800119a:	2800      	cmp	r0, #0
 800119c:	d0de      	beq.n	800115c <__submore+0x1a>
 800119e:	eb00 0806 	add.w	r8, r0, r6
 80011a2:	4601      	mov	r1, r0
 80011a4:	4632      	mov	r2, r6
 80011a6:	4640      	mov	r0, r8
 80011a8:	f000 f816 	bl	80011d8 <memcpy>
 80011ac:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80011b0:	f8c4 8000 	str.w	r8, [r4]
 80011b4:	e7e9      	b.n	800118a <__submore+0x48>
	...

080011b8 <_sbrk_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	4d06      	ldr	r5, [pc, #24]	@ (80011d4 <_sbrk_r+0x1c>)
 80011bc:	2300      	movs	r3, #0
 80011be:	4604      	mov	r4, r0
 80011c0:	4608      	mov	r0, r1
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	f7ff f9a8 	bl	8000518 <_sbrk>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d102      	bne.n	80011d2 <_sbrk_r+0x1a>
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	b103      	cbz	r3, 80011d2 <_sbrk_r+0x1a>
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
 80011d4:	200001ac 	.word	0x200001ac

080011d8 <memcpy>:
 80011d8:	440a      	add	r2, r1
 80011da:	4291      	cmp	r1, r2
 80011dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80011e0:	d100      	bne.n	80011e4 <memcpy+0xc>
 80011e2:	4770      	bx	lr
 80011e4:	b510      	push	{r4, lr}
 80011e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80011ee:	4291      	cmp	r1, r2
 80011f0:	d1f9      	bne.n	80011e6 <memcpy+0xe>
 80011f2:	bd10      	pop	{r4, pc}

080011f4 <_realloc_r>:
 80011f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f8:	4680      	mov	r8, r0
 80011fa:	4615      	mov	r5, r2
 80011fc:	460c      	mov	r4, r1
 80011fe:	b921      	cbnz	r1, 800120a <_realloc_r+0x16>
 8001200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001204:	4611      	mov	r1, r2
 8001206:	f7ff bbbd 	b.w	8000984 <_malloc_r>
 800120a:	b92a      	cbnz	r2, 8001218 <_realloc_r+0x24>
 800120c:	f7ff fb4e 	bl	80008ac <_free_r>
 8001210:	2400      	movs	r4, #0
 8001212:	4620      	mov	r0, r4
 8001214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001218:	f000 f906 	bl	8001428 <_malloc_usable_size_r>
 800121c:	4285      	cmp	r5, r0
 800121e:	4606      	mov	r6, r0
 8001220:	d802      	bhi.n	8001228 <_realloc_r+0x34>
 8001222:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001226:	d8f4      	bhi.n	8001212 <_realloc_r+0x1e>
 8001228:	4629      	mov	r1, r5
 800122a:	4640      	mov	r0, r8
 800122c:	f7ff fbaa 	bl	8000984 <_malloc_r>
 8001230:	4607      	mov	r7, r0
 8001232:	2800      	cmp	r0, #0
 8001234:	d0ec      	beq.n	8001210 <_realloc_r+0x1c>
 8001236:	42b5      	cmp	r5, r6
 8001238:	462a      	mov	r2, r5
 800123a:	4621      	mov	r1, r4
 800123c:	bf28      	it	cs
 800123e:	4632      	movcs	r2, r6
 8001240:	f7ff ffca 	bl	80011d8 <memcpy>
 8001244:	4621      	mov	r1, r4
 8001246:	4640      	mov	r0, r8
 8001248:	f7ff fb30 	bl	80008ac <_free_r>
 800124c:	463c      	mov	r4, r7
 800124e:	e7e0      	b.n	8001212 <_realloc_r+0x1e>

08001250 <_strtol_l.constprop.0>:
 8001250:	2b24      	cmp	r3, #36	@ 0x24
 8001252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001256:	4686      	mov	lr, r0
 8001258:	4690      	mov	r8, r2
 800125a:	d801      	bhi.n	8001260 <_strtol_l.constprop.0+0x10>
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <_strtol_l.constprop.0+0x1e>
 8001260:	f7ff faf8 	bl	8000854 <__errno>
 8001264:	2316      	movs	r3, #22
 8001266:	6003      	str	r3, [r0, #0]
 8001268:	2000      	movs	r0, #0
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	4834      	ldr	r0, [pc, #208]	@ (8001340 <_strtol_l.constprop.0+0xf0>)
 8001270:	460d      	mov	r5, r1
 8001272:	462a      	mov	r2, r5
 8001274:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001278:	5d06      	ldrb	r6, [r0, r4]
 800127a:	f016 0608 	ands.w	r6, r6, #8
 800127e:	d1f8      	bne.n	8001272 <_strtol_l.constprop.0+0x22>
 8001280:	2c2d      	cmp	r4, #45	@ 0x2d
 8001282:	d12d      	bne.n	80012e0 <_strtol_l.constprop.0+0x90>
 8001284:	782c      	ldrb	r4, [r5, #0]
 8001286:	2601      	movs	r6, #1
 8001288:	1c95      	adds	r5, r2, #2
 800128a:	f033 0210 	bics.w	r2, r3, #16
 800128e:	d109      	bne.n	80012a4 <_strtol_l.constprop.0+0x54>
 8001290:	2c30      	cmp	r4, #48	@ 0x30
 8001292:	d12a      	bne.n	80012ea <_strtol_l.constprop.0+0x9a>
 8001294:	782a      	ldrb	r2, [r5, #0]
 8001296:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800129a:	2a58      	cmp	r2, #88	@ 0x58
 800129c:	d125      	bne.n	80012ea <_strtol_l.constprop.0+0x9a>
 800129e:	786c      	ldrb	r4, [r5, #1]
 80012a0:	2310      	movs	r3, #16
 80012a2:	3502      	adds	r5, #2
 80012a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80012a8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80012ac:	2200      	movs	r2, #0
 80012ae:	fbbc f9f3 	udiv	r9, ip, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80012b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80012bc:	2f09      	cmp	r7, #9
 80012be:	d81b      	bhi.n	80012f8 <_strtol_l.constprop.0+0xa8>
 80012c0:	463c      	mov	r4, r7
 80012c2:	42a3      	cmp	r3, r4
 80012c4:	dd27      	ble.n	8001316 <_strtol_l.constprop.0+0xc6>
 80012c6:	1c57      	adds	r7, r2, #1
 80012c8:	d007      	beq.n	80012da <_strtol_l.constprop.0+0x8a>
 80012ca:	4581      	cmp	r9, r0
 80012cc:	d320      	bcc.n	8001310 <_strtol_l.constprop.0+0xc0>
 80012ce:	d101      	bne.n	80012d4 <_strtol_l.constprop.0+0x84>
 80012d0:	45a2      	cmp	sl, r4
 80012d2:	db1d      	blt.n	8001310 <_strtol_l.constprop.0+0xc0>
 80012d4:	fb00 4003 	mla	r0, r0, r3, r4
 80012d8:	2201      	movs	r2, #1
 80012da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80012de:	e7eb      	b.n	80012b8 <_strtol_l.constprop.0+0x68>
 80012e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80012e2:	bf04      	itt	eq
 80012e4:	782c      	ldrbeq	r4, [r5, #0]
 80012e6:	1c95      	addeq	r5, r2, #2
 80012e8:	e7cf      	b.n	800128a <_strtol_l.constprop.0+0x3a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1da      	bne.n	80012a4 <_strtol_l.constprop.0+0x54>
 80012ee:	2c30      	cmp	r4, #48	@ 0x30
 80012f0:	bf0c      	ite	eq
 80012f2:	2308      	moveq	r3, #8
 80012f4:	230a      	movne	r3, #10
 80012f6:	e7d5      	b.n	80012a4 <_strtol_l.constprop.0+0x54>
 80012f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80012fc:	2f19      	cmp	r7, #25
 80012fe:	d801      	bhi.n	8001304 <_strtol_l.constprop.0+0xb4>
 8001300:	3c37      	subs	r4, #55	@ 0x37
 8001302:	e7de      	b.n	80012c2 <_strtol_l.constprop.0+0x72>
 8001304:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001308:	2f19      	cmp	r7, #25
 800130a:	d804      	bhi.n	8001316 <_strtol_l.constprop.0+0xc6>
 800130c:	3c57      	subs	r4, #87	@ 0x57
 800130e:	e7d8      	b.n	80012c2 <_strtol_l.constprop.0+0x72>
 8001310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001314:	e7e1      	b.n	80012da <_strtol_l.constprop.0+0x8a>
 8001316:	1c53      	adds	r3, r2, #1
 8001318:	d108      	bne.n	800132c <_strtol_l.constprop.0+0xdc>
 800131a:	2322      	movs	r3, #34	@ 0x22
 800131c:	f8ce 3000 	str.w	r3, [lr]
 8001320:	4660      	mov	r0, ip
 8001322:	f1b8 0f00 	cmp.w	r8, #0
 8001326:	d0a0      	beq.n	800126a <_strtol_l.constprop.0+0x1a>
 8001328:	1e69      	subs	r1, r5, #1
 800132a:	e006      	b.n	800133a <_strtol_l.constprop.0+0xea>
 800132c:	b106      	cbz	r6, 8001330 <_strtol_l.constprop.0+0xe0>
 800132e:	4240      	negs	r0, r0
 8001330:	f1b8 0f00 	cmp.w	r8, #0
 8001334:	d099      	beq.n	800126a <_strtol_l.constprop.0+0x1a>
 8001336:	2a00      	cmp	r2, #0
 8001338:	d1f6      	bne.n	8001328 <_strtol_l.constprop.0+0xd8>
 800133a:	f8c8 1000 	str.w	r1, [r8]
 800133e:	e794      	b.n	800126a <_strtol_l.constprop.0+0x1a>
 8001340:	080014c8 	.word	0x080014c8

08001344 <_strtol_r>:
 8001344:	f7ff bf84 	b.w	8001250 <_strtol_l.constprop.0>

08001348 <_strtoul_l.constprop.0>:
 8001348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800134c:	4e34      	ldr	r6, [pc, #208]	@ (8001420 <_strtoul_l.constprop.0+0xd8>)
 800134e:	4686      	mov	lr, r0
 8001350:	460d      	mov	r5, r1
 8001352:	4628      	mov	r0, r5
 8001354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001358:	5d37      	ldrb	r7, [r6, r4]
 800135a:	f017 0708 	ands.w	r7, r7, #8
 800135e:	d1f8      	bne.n	8001352 <_strtoul_l.constprop.0+0xa>
 8001360:	2c2d      	cmp	r4, #45	@ 0x2d
 8001362:	d12f      	bne.n	80013c4 <_strtoul_l.constprop.0+0x7c>
 8001364:	782c      	ldrb	r4, [r5, #0]
 8001366:	2701      	movs	r7, #1
 8001368:	1c85      	adds	r5, r0, #2
 800136a:	f033 0010 	bics.w	r0, r3, #16
 800136e:	d109      	bne.n	8001384 <_strtoul_l.constprop.0+0x3c>
 8001370:	2c30      	cmp	r4, #48	@ 0x30
 8001372:	d12c      	bne.n	80013ce <_strtoul_l.constprop.0+0x86>
 8001374:	7828      	ldrb	r0, [r5, #0]
 8001376:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800137a:	2858      	cmp	r0, #88	@ 0x58
 800137c:	d127      	bne.n	80013ce <_strtoul_l.constprop.0+0x86>
 800137e:	786c      	ldrb	r4, [r5, #1]
 8001380:	2310      	movs	r3, #16
 8001382:	3502      	adds	r5, #2
 8001384:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001388:	2600      	movs	r6, #0
 800138a:	fbb8 f8f3 	udiv	r8, r8, r3
 800138e:	fb03 f908 	mul.w	r9, r3, r8
 8001392:	ea6f 0909 	mvn.w	r9, r9
 8001396:	4630      	mov	r0, r6
 8001398:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800139c:	f1bc 0f09 	cmp.w	ip, #9
 80013a0:	d81c      	bhi.n	80013dc <_strtoul_l.constprop.0+0x94>
 80013a2:	4664      	mov	r4, ip
 80013a4:	42a3      	cmp	r3, r4
 80013a6:	dd2a      	ble.n	80013fe <_strtoul_l.constprop.0+0xb6>
 80013a8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80013ac:	d007      	beq.n	80013be <_strtoul_l.constprop.0+0x76>
 80013ae:	4580      	cmp	r8, r0
 80013b0:	d322      	bcc.n	80013f8 <_strtoul_l.constprop.0+0xb0>
 80013b2:	d101      	bne.n	80013b8 <_strtoul_l.constprop.0+0x70>
 80013b4:	45a1      	cmp	r9, r4
 80013b6:	db1f      	blt.n	80013f8 <_strtoul_l.constprop.0+0xb0>
 80013b8:	fb00 4003 	mla	r0, r0, r3, r4
 80013bc:	2601      	movs	r6, #1
 80013be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80013c2:	e7e9      	b.n	8001398 <_strtoul_l.constprop.0+0x50>
 80013c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80013c6:	bf04      	itt	eq
 80013c8:	782c      	ldrbeq	r4, [r5, #0]
 80013ca:	1c85      	addeq	r5, r0, #2
 80013cc:	e7cd      	b.n	800136a <_strtoul_l.constprop.0+0x22>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1d8      	bne.n	8001384 <_strtoul_l.constprop.0+0x3c>
 80013d2:	2c30      	cmp	r4, #48	@ 0x30
 80013d4:	bf0c      	ite	eq
 80013d6:	2308      	moveq	r3, #8
 80013d8:	230a      	movne	r3, #10
 80013da:	e7d3      	b.n	8001384 <_strtoul_l.constprop.0+0x3c>
 80013dc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80013e0:	f1bc 0f19 	cmp.w	ip, #25
 80013e4:	d801      	bhi.n	80013ea <_strtoul_l.constprop.0+0xa2>
 80013e6:	3c37      	subs	r4, #55	@ 0x37
 80013e8:	e7dc      	b.n	80013a4 <_strtoul_l.constprop.0+0x5c>
 80013ea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80013ee:	f1bc 0f19 	cmp.w	ip, #25
 80013f2:	d804      	bhi.n	80013fe <_strtoul_l.constprop.0+0xb6>
 80013f4:	3c57      	subs	r4, #87	@ 0x57
 80013f6:	e7d5      	b.n	80013a4 <_strtoul_l.constprop.0+0x5c>
 80013f8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80013fc:	e7df      	b.n	80013be <_strtoul_l.constprop.0+0x76>
 80013fe:	1c73      	adds	r3, r6, #1
 8001400:	d106      	bne.n	8001410 <_strtoul_l.constprop.0+0xc8>
 8001402:	2322      	movs	r3, #34	@ 0x22
 8001404:	f8ce 3000 	str.w	r3, [lr]
 8001408:	4630      	mov	r0, r6
 800140a:	b932      	cbnz	r2, 800141a <_strtoul_l.constprop.0+0xd2>
 800140c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001410:	b107      	cbz	r7, 8001414 <_strtoul_l.constprop.0+0xcc>
 8001412:	4240      	negs	r0, r0
 8001414:	2a00      	cmp	r2, #0
 8001416:	d0f9      	beq.n	800140c <_strtoul_l.constprop.0+0xc4>
 8001418:	b106      	cbz	r6, 800141c <_strtoul_l.constprop.0+0xd4>
 800141a:	1e69      	subs	r1, r5, #1
 800141c:	6011      	str	r1, [r2, #0]
 800141e:	e7f5      	b.n	800140c <_strtoul_l.constprop.0+0xc4>
 8001420:	080014c8 	.word	0x080014c8

08001424 <_strtoul_r>:
 8001424:	f7ff bf90 	b.w	8001348 <_strtoul_l.constprop.0>

08001428 <_malloc_usable_size_r>:
 8001428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800142c:	1f18      	subs	r0, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	bfbc      	itt	lt
 8001432:	580b      	ldrlt	r3, [r1, r0]
 8001434:	18c0      	addlt	r0, r0, r3
 8001436:	4770      	bx	lr

08001438 <_init>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	bf00      	nop
 800143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143e:	bc08      	pop	{r3}
 8001440:	469e      	mov	lr, r3
 8001442:	4770      	bx	lr

08001444 <_fini>:
 8001444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001446:	bf00      	nop
 8001448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144a:	bc08      	pop	{r3}
 800144c:	469e      	mov	lr, r3
 800144e:	4770      	bx	lr
