
Day7_asiignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000630  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080007b8  080007b8  000017b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000940  08000940  00002054  2**0
                  CONTENTS
  4 .ARM          00000000  08000940  08000940  00002054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000940  08000940  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000940  08000940  00001940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000944  08000944  00001944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08000948  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002054  2**0
                  CONTENTS
 10 .bss          00000154  20000054  20000054  00002054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  00002054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f94  00000000  00000000  0000207e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050d  00000000  00000000  00003012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00003520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a5  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018231  00000000  00000000  000036bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014e0  00000000  00000000  0001b8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b904  00000000  00000000  0001cdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a86d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000458  00000000  00000000  000a8718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  000a8b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007a0 	.word	0x080007a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	080007a0 	.word	0x080007a0

080001c8 <LedInit>:

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001d0:	4b28      	ldr	r3, [pc, #160]	@ (8000274 <LedInit+0xac>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a27      	ldr	r2, [pc, #156]	@ (8000274 <LedInit+0xac>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001dc:	4b26      	ldr	r3, [pc, #152]	@ (8000278 <LedInit+0xb0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	3201      	adds	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4a21      	ldr	r2, [pc, #132]	@ (8000278 <LedInit+0xb0>)
 80001f2:	400b      	ands	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80001f6:	4b20      	ldr	r3, [pc, #128]	@ (8000278 <LedInit+0xb0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	0052      	lsls	r2, r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1c      	ldr	r2, [pc, #112]	@ (8000278 <LedInit+0xb0>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800020c:	4b1a      	ldr	r3, [pc, #104]	@ (8000278 <LedInit+0xb0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	0052      	lsls	r2, r2, #1
 8000214:	3201      	adds	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	4091      	lsls	r1, r2
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	0052      	lsls	r2, r2, #1
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	430a      	orrs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a13      	ldr	r2, [pc, #76]	@ (8000278 <LedInit+0xb0>)
 800022c:	400b      	ands	r3, r1
 800022e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <LedInit+0xb0>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	3201      	adds	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4091      	lsls	r1, r2
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	0052      	lsls	r2, r2, #1
 8000242:	2001      	movs	r0, #1
 8000244:	fa00 f202 	lsl.w	r2, r0, r2
 8000248:	430a      	orrs	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <LedInit+0xb0>)
 8000250:	400b      	ands	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000254:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <LedInit+0xb0>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <LedInit+0xb0>)
 8000266:	400b      	ands	r3, r1
 8000268:	6053      	str	r3, [r2, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020c00 	.word	0x40020c00

0800027c <LedOn>:

void LedOn(uint32_t pin)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->BSRR |= BV(pin);
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <LedOn+0x28>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	2101      	movs	r1, #1
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <LedOn+0x28>)
 8000294:	430b      	orrs	r3, r1
 8000296:	6193      	str	r3, [r2, #24]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <LedOff>:

void LedOff(uint32_t pin)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->BSRR |= BV(pin+16);
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <LedOff+0x28>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	3210      	adds	r2, #16
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	@ (80002d0 <LedOff+0x28>)
 80002c2:	430b      	orrs	r3, r1
 80002c4:	6193      	str	r3, [r2, #24]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <DelayMs+0x44>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <DelayMs+0x48>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <DelayMs+0x4c>)
 80002e8:	fba2 2303 	umull	r2, r3, r2, r3
 80002ec:	099b      	lsrs	r3, r3, #6
 80002ee:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	fb02 f303 	mul.w	r3, r2, r3
 80002f8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002fa:	bf00      	nop
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <DelayMs+0x44>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	1ad2      	subs	r2, r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d3f8      	bcc.n	80002fc <DelayMs+0x28>
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e0001000 	.word	0xe0001000
 800031c:	20000000 	.word	0x20000000
 8000320:	10624dd3 	.word	0x10624dd3

08000324 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	char ch[8];
	SystemInit();
 800032a:	f000 f84b 	bl	80003c4 <SystemInit>
	UartInit(BAUD_9600);
 800032e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000332:	f000 f87d 	bl	8000430 <UartInit>
	LedInit(LED_BLUE);
 8000336:	200f      	movs	r0, #15
 8000338:	f7ff ff46 	bl	80001c8 <LedInit>
	LedInit(LED_RED);
 800033c:	200e      	movs	r0, #14
 800033e:	f7ff ff43 	bl	80001c8 <LedInit>
	UartPuts("Led-Uart Menu Driven\r\n");
 8000342:	481e      	ldr	r0, [pc, #120]	@ (80003bc <main+0x98>)
 8000344:	f000 f90e 	bl	8000564 <UartPuts>
		while(1)
			{
				UartPuts("Select Your Choice:\r\n1.Turn Red Led On.\r\n2.Turn Red Led Off\r\n3.Turn Blue Led On\r\n4.Turn Blue Led Off\r\nChoice:");
 8000348:	481d      	ldr	r0, [pc, #116]	@ (80003c0 <main+0x9c>)
 800034a:	f000 f90b 	bl	8000564 <UartPuts>
				UartGets(ch);
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f923 	bl	800059c <UartGets>
				int c = atoi(ch);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f96e 	bl	800063a <atoi>
 800035e:	60f8      	str	r0, [r7, #12]
				while(c==0);
 8000360:	bf00      	nop
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0fc      	beq.n	8000362 <main+0x3e>
				switch(c)
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3b01      	subs	r3, #1
 800036c:	2b03      	cmp	r3, #3
 800036e:	d8eb      	bhi.n	8000348 <main+0x24>
 8000370:	a201      	add	r2, pc, #4	@ (adr r2, 8000378 <main+0x54>)
 8000372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000376:	bf00      	nop
 8000378:	08000389 	.word	0x08000389
 800037c:	08000399 	.word	0x08000399
 8000380:	080003a1 	.word	0x080003a1
 8000384:	080003b1 	.word	0x080003b1
					{
						case 1:
							LedOn(LED_RED);
 8000388:	200e      	movs	r0, #14
 800038a:	f7ff ff77 	bl	800027c <LedOn>
							DelayMs(2000);
 800038e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000392:	f7ff ff9f 	bl	80002d4 <DelayMs>
							break;
 8000396:	e010      	b.n	80003ba <main+0x96>
						case 2:
							LedOff(LED_RED);
 8000398:	200e      	movs	r0, #14
 800039a:	f7ff ff85 	bl	80002a8 <LedOff>
							break;
 800039e:	e00c      	b.n	80003ba <main+0x96>
						case 3:
							LedOn(LED_BLUE);
 80003a0:	200f      	movs	r0, #15
 80003a2:	f7ff ff6b 	bl	800027c <LedOn>
							DelayMs(2000);
 80003a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003aa:	f7ff ff93 	bl	80002d4 <DelayMs>
							break;
 80003ae:	e004      	b.n	80003ba <main+0x96>
						case 4:
							LedOff(LED_BLUE);
 80003b0:	200f      	movs	r0, #15
 80003b2:	f7ff ff79 	bl	80002a8 <LedOff>
							break;
 80003b6:	bf00      	nop
 80003b8:	e7c6      	b.n	8000348 <main+0x24>
			{
 80003ba:	e7c5      	b.n	8000348 <main+0x24>
 80003bc:	080007b8 	.word	0x080007b8
 80003c0:	080007d0 	.word	0x080007d0

080003c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  DWT_Init();
 80003c8:	f000 f802 	bl	80003d0 <DWT_Init>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80003d4:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <DWT_Init+0x58>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a13      	ldr	r2, [pc, #76]	@ (8000428 <DWT_Init+0x58>)
 80003da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003de:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <DWT_Init+0x58>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a10      	ldr	r2, [pc, #64]	@ (8000428 <DWT_Init+0x58>)
 80003e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003ea:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <DWT_Init+0x5c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <DWT_Init+0x5c>)
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <DWT_Init+0x5c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0b      	ldr	r2, [pc, #44]	@ (800042c <DWT_Init+0x5c>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <DWT_Init+0x5c>)
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800040a:	bf00      	nop
    __ASM volatile ("NOP");
 800040c:	bf00      	nop
    __ASM volatile ("NOP");
 800040e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <DWT_Init+0x5c>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	bf0c      	ite	eq
 8000418:	2301      	moveq	r3, #1
 800041a:	2300      	movne	r3, #0
 800041c:	b2db      	uxtb	r3, r3
}
 800041e:	4618      	mov	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000edf0 	.word	0xe000edf0
 800042c:	e0001000 	.word	0xe0001000

08000430 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000438:	4b31      	ldr	r3, [pc, #196]	@ (8000500 <UartInit+0xd0>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a30      	ldr	r2, [pc, #192]	@ (8000500 <UartInit+0xd0>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000444:	4b2f      	ldr	r3, [pc, #188]	@ (8000504 <UartInit+0xd4>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	4a2e      	ldr	r2, [pc, #184]	@ (8000504 <UartInit+0xd4>)
 800044a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800044e:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000450:	4b2c      	ldr	r3, [pc, #176]	@ (8000504 <UartInit+0xd4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a2b      	ldr	r2, [pc, #172]	@ (8000504 <UartInit+0xd4>)
 8000456:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800045a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 800045c:	4b29      	ldr	r3, [pc, #164]	@ (8000504 <UartInit+0xd4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a28      	ldr	r2, [pc, #160]	@ (8000504 <UartInit+0xd4>)
 8000462:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000466:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000468:	4b26      	ldr	r3, [pc, #152]	@ (8000504 <UartInit+0xd4>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4a25      	ldr	r2, [pc, #148]	@ (8000504 <UartInit+0xd4>)
 800046e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000472:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000474:	4b23      	ldr	r3, [pc, #140]	@ (8000504 <UartInit+0xd4>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a22      	ldr	r2, [pc, #136]	@ (8000504 <UartInit+0xd4>)
 800047a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800047e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000480:	4b20      	ldr	r3, [pc, #128]	@ (8000504 <UartInit+0xd4>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	4a1f      	ldr	r2, [pc, #124]	@ (8000504 <UartInit+0xd4>)
 8000486:	f023 030c 	bic.w	r3, r3, #12
 800048a:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <UartInit+0xd0>)
 800048e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000490:	4a1b      	ldr	r2, [pc, #108]	@ (8000500 <UartInit+0xd0>)
 8000492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000496:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <UartInit+0xd8>)
 800049a:	220c      	movs	r2, #12
 800049c:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <UartInit+0xd8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <UartInit+0xd8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80004b0:	d016      	beq.n	80004e0 <UartInit+0xb0>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80004b8:	d816      	bhi.n	80004e8 <UartInit+0xb8>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80004c0:	d004      	beq.n	80004cc <UartInit+0x9c>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80004c8:	d005      	beq.n	80004d6 <UartInit+0xa6>
 80004ca:	e00d      	b.n	80004e8 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80004cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <UartInit+0xd8>)
 80004ce:	f240 6283 	movw	r2, #1667	@ 0x683
 80004d2:	609a      	str	r2, [r3, #8]
			break;
 80004d4:	e008      	b.n	80004e8 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <UartInit+0xd8>)
 80004d8:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80004dc:	609a      	str	r2, [r3, #8]
			break;
 80004de:	e003      	b.n	80004e8 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <UartInit+0xd8>)
 80004e2:	228b      	movs	r2, #139	@ 0x8b
 80004e4:	609a      	str	r2, [r3, #8]
			break;
 80004e6:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80004e8:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <UartInit+0xd8>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a06      	ldr	r2, [pc, #24]	@ (8000508 <UartInit+0xd8>)
 80004ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004f2:	60d3      	str	r3, [r2, #12]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800
 8000504:	40020000 	.word	0x40020000
 8000508:	40004400 	.word	0x40004400

0800050c <UartPutch>:

void UartPutch(uint8_t ch) {
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000516:	bf00      	nop
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <UartPutch+0x28>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000524:	4a03      	ldr	r2, [pc, #12]	@ (8000534 <UartPutch+0x28>)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	6053      	str	r3, [r2, #4]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40004400 	.word	0x40004400

08000538 <UartGetch>:

uint8_t UartGetch(void) {
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800053e:	bf00      	nop
 8000540:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <UartGetch+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f9      	beq.n	8000540 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <UartGetch+0x28>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000552:	79fb      	ldrb	r3, [r7, #7]
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40004400 	.word	0x40004400

08000564 <UartPuts>:

void UartPuts(char str[]) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e009      	b.n	8000586 <UartPuts+0x22>
		UartPutch(str[i]);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffc6 	bl	800050c <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3301      	adds	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1ef      	bne.n	8000572 <UartPuts+0xe>
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <UartGets>:

void UartGets(char str[]) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	int i=0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80005a8:	f7ff ffc6 	bl	8000538 <UartGetch>
 80005ac:	4603      	mov	r3, r0
 80005ae:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	7afa      	ldrb	r2, [r7, #11]
 80005b8:	701a      	strb	r2, [r3, #0]
		i++;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 80005c0:	7afb      	ldrb	r3, [r7, #11]
 80005c2:	2b0d      	cmp	r3, #13
 80005c4:	d1f0      	bne.n	80005a8 <UartGets+0xc>
	str[i] = '\n';
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	220a      	movs	r2, #10
 80005ce:	701a      	strb	r2, [r3, #0]
	i++;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4413      	add	r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ec:	f7ff feea 	bl	80003c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490d      	ldr	r1, [pc, #52]	@ (8000628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0a      	ldr	r4, [pc, #40]	@ (8000634 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000616:	f000 f89f 	bl	8000758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fe83 	bl	8000324 <main>

0800061e <LoopForever>:

LoopForever:
  b LoopForever
 800061e:	e7fe      	b.n	800061e <LoopForever>
  ldr   r0, =_estack
 8000620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800062c:	08000948 	.word	0x08000948
  ldr r2, =_sbss
 8000630:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000634:	200001a8 	.word	0x200001a8

08000638 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>

0800063a <atoi>:
 800063a:	220a      	movs	r2, #10
 800063c:	2100      	movs	r1, #0
 800063e:	f000 b87b 	b.w	8000738 <strtol>
	...

08000644 <_strtol_l.constprop.0>:
 8000644:	2b24      	cmp	r3, #36	@ 0x24
 8000646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064a:	4686      	mov	lr, r0
 800064c:	4690      	mov	r8, r2
 800064e:	d801      	bhi.n	8000654 <_strtol_l.constprop.0+0x10>
 8000650:	2b01      	cmp	r3, #1
 8000652:	d106      	bne.n	8000662 <_strtol_l.constprop.0+0x1e>
 8000654:	f000 f87a 	bl	800074c <__errno>
 8000658:	2316      	movs	r3, #22
 800065a:	6003      	str	r3, [r0, #0]
 800065c:	2000      	movs	r0, #0
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	4834      	ldr	r0, [pc, #208]	@ (8000734 <_strtol_l.constprop.0+0xf0>)
 8000664:	460d      	mov	r5, r1
 8000666:	462a      	mov	r2, r5
 8000668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800066c:	5d06      	ldrb	r6, [r0, r4]
 800066e:	f016 0608 	ands.w	r6, r6, #8
 8000672:	d1f8      	bne.n	8000666 <_strtol_l.constprop.0+0x22>
 8000674:	2c2d      	cmp	r4, #45	@ 0x2d
 8000676:	d12d      	bne.n	80006d4 <_strtol_l.constprop.0+0x90>
 8000678:	782c      	ldrb	r4, [r5, #0]
 800067a:	2601      	movs	r6, #1
 800067c:	1c95      	adds	r5, r2, #2
 800067e:	f033 0210 	bics.w	r2, r3, #16
 8000682:	d109      	bne.n	8000698 <_strtol_l.constprop.0+0x54>
 8000684:	2c30      	cmp	r4, #48	@ 0x30
 8000686:	d12a      	bne.n	80006de <_strtol_l.constprop.0+0x9a>
 8000688:	782a      	ldrb	r2, [r5, #0]
 800068a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800068e:	2a58      	cmp	r2, #88	@ 0x58
 8000690:	d125      	bne.n	80006de <_strtol_l.constprop.0+0x9a>
 8000692:	786c      	ldrb	r4, [r5, #1]
 8000694:	2310      	movs	r3, #16
 8000696:	3502      	adds	r5, #2
 8000698:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800069c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80006a0:	2200      	movs	r2, #0
 80006a2:	fbbc f9f3 	udiv	r9, ip, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80006ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80006b0:	2f09      	cmp	r7, #9
 80006b2:	d81b      	bhi.n	80006ec <_strtol_l.constprop.0+0xa8>
 80006b4:	463c      	mov	r4, r7
 80006b6:	42a3      	cmp	r3, r4
 80006b8:	dd27      	ble.n	800070a <_strtol_l.constprop.0+0xc6>
 80006ba:	1c57      	adds	r7, r2, #1
 80006bc:	d007      	beq.n	80006ce <_strtol_l.constprop.0+0x8a>
 80006be:	4581      	cmp	r9, r0
 80006c0:	d320      	bcc.n	8000704 <_strtol_l.constprop.0+0xc0>
 80006c2:	d101      	bne.n	80006c8 <_strtol_l.constprop.0+0x84>
 80006c4:	45a2      	cmp	sl, r4
 80006c6:	db1d      	blt.n	8000704 <_strtol_l.constprop.0+0xc0>
 80006c8:	fb00 4003 	mla	r0, r0, r3, r4
 80006cc:	2201      	movs	r2, #1
 80006ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80006d2:	e7eb      	b.n	80006ac <_strtol_l.constprop.0+0x68>
 80006d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80006d6:	bf04      	itt	eq
 80006d8:	782c      	ldrbeq	r4, [r5, #0]
 80006da:	1c95      	addeq	r5, r2, #2
 80006dc:	e7cf      	b.n	800067e <_strtol_l.constprop.0+0x3a>
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1da      	bne.n	8000698 <_strtol_l.constprop.0+0x54>
 80006e2:	2c30      	cmp	r4, #48	@ 0x30
 80006e4:	bf0c      	ite	eq
 80006e6:	2308      	moveq	r3, #8
 80006e8:	230a      	movne	r3, #10
 80006ea:	e7d5      	b.n	8000698 <_strtol_l.constprop.0+0x54>
 80006ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80006f0:	2f19      	cmp	r7, #25
 80006f2:	d801      	bhi.n	80006f8 <_strtol_l.constprop.0+0xb4>
 80006f4:	3c37      	subs	r4, #55	@ 0x37
 80006f6:	e7de      	b.n	80006b6 <_strtol_l.constprop.0+0x72>
 80006f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80006fc:	2f19      	cmp	r7, #25
 80006fe:	d804      	bhi.n	800070a <_strtol_l.constprop.0+0xc6>
 8000700:	3c57      	subs	r4, #87	@ 0x57
 8000702:	e7d8      	b.n	80006b6 <_strtol_l.constprop.0+0x72>
 8000704:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000708:	e7e1      	b.n	80006ce <_strtol_l.constprop.0+0x8a>
 800070a:	1c53      	adds	r3, r2, #1
 800070c:	d108      	bne.n	8000720 <_strtol_l.constprop.0+0xdc>
 800070e:	2322      	movs	r3, #34	@ 0x22
 8000710:	f8ce 3000 	str.w	r3, [lr]
 8000714:	4660      	mov	r0, ip
 8000716:	f1b8 0f00 	cmp.w	r8, #0
 800071a:	d0a0      	beq.n	800065e <_strtol_l.constprop.0+0x1a>
 800071c:	1e69      	subs	r1, r5, #1
 800071e:	e006      	b.n	800072e <_strtol_l.constprop.0+0xea>
 8000720:	b106      	cbz	r6, 8000724 <_strtol_l.constprop.0+0xe0>
 8000722:	4240      	negs	r0, r0
 8000724:	f1b8 0f00 	cmp.w	r8, #0
 8000728:	d099      	beq.n	800065e <_strtol_l.constprop.0+0x1a>
 800072a:	2a00      	cmp	r2, #0
 800072c:	d1f6      	bne.n	800071c <_strtol_l.constprop.0+0xd8>
 800072e:	f8c8 1000 	str.w	r1, [r8]
 8000732:	e794      	b.n	800065e <_strtol_l.constprop.0+0x1a>
 8000734:	0800083f 	.word	0x0800083f

08000738 <strtol>:
 8000738:	4613      	mov	r3, r2
 800073a:	460a      	mov	r2, r1
 800073c:	4601      	mov	r1, r0
 800073e:	4802      	ldr	r0, [pc, #8]	@ (8000748 <strtol+0x10>)
 8000740:	6800      	ldr	r0, [r0, #0]
 8000742:	f7ff bf7f 	b.w	8000644 <_strtol_l.constprop.0>
 8000746:	bf00      	nop
 8000748:	20000004 	.word	0x20000004

0800074c <__errno>:
 800074c:	4b01      	ldr	r3, [pc, #4]	@ (8000754 <__errno+0x8>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000004 	.word	0x20000004

08000758 <__libc_init_array>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	4d0d      	ldr	r5, [pc, #52]	@ (8000790 <__libc_init_array+0x38>)
 800075c:	4c0d      	ldr	r4, [pc, #52]	@ (8000794 <__libc_init_array+0x3c>)
 800075e:	1b64      	subs	r4, r4, r5
 8000760:	10a4      	asrs	r4, r4, #2
 8000762:	2600      	movs	r6, #0
 8000764:	42a6      	cmp	r6, r4
 8000766:	d109      	bne.n	800077c <__libc_init_array+0x24>
 8000768:	4d0b      	ldr	r5, [pc, #44]	@ (8000798 <__libc_init_array+0x40>)
 800076a:	4c0c      	ldr	r4, [pc, #48]	@ (800079c <__libc_init_array+0x44>)
 800076c:	f000 f818 	bl	80007a0 <_init>
 8000770:	1b64      	subs	r4, r4, r5
 8000772:	10a4      	asrs	r4, r4, #2
 8000774:	2600      	movs	r6, #0
 8000776:	42a6      	cmp	r6, r4
 8000778:	d105      	bne.n	8000786 <__libc_init_array+0x2e>
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000780:	4798      	blx	r3
 8000782:	3601      	adds	r6, #1
 8000784:	e7ee      	b.n	8000764 <__libc_init_array+0xc>
 8000786:	f855 3b04 	ldr.w	r3, [r5], #4
 800078a:	4798      	blx	r3
 800078c:	3601      	adds	r6, #1
 800078e:	e7f2      	b.n	8000776 <__libc_init_array+0x1e>
 8000790:	08000940 	.word	0x08000940
 8000794:	08000940 	.word	0x08000940
 8000798:	08000940 	.word	0x08000940
 800079c:	08000944 	.word	0x08000944

080007a0 <_init>:
 80007a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a2:	bf00      	nop
 80007a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a6:	bc08      	pop	{r3}
 80007a8:	469e      	mov	lr, r3
 80007aa:	4770      	bx	lr

080007ac <_fini>:
 80007ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ae:	bf00      	nop
 80007b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b2:	bc08      	pop	{r3}
 80007b4:	469e      	mov	lr, r3
 80007b6:	4770      	bx	lr
